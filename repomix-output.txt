This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-04-05T19:12:35.407Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
/
  Users/
    jess/
      Desktop/
        dating-app/
          app/
            api/
              verify/
                route.ts
            chat/
              [id]/
                page.tsx
            data/
              mockData.ts
            matches/
              page.tsx
            profile/
              edit/
                page.tsx
              page.tsx
            purchased-features/
              page.tsx
            settings/
              page.tsx
            swipe/
              page.tsx
            verify/
              page.tsx
            globals.css
            layout.tsx
            page.tsx
          components/
            BottomNav.tsx
            MainPage.tsx
            minikit-provider.tsx
            NavigationLayout.tsx
            profile-card.tsx
            StickerPicker.tsx
            SwipePage.tsx
            theme-provider.tsx
            VerifyHumanity.tsx
          lib/
            data.ts
            types.ts
            utils.ts
            worldcoin.ts

================================================================
Repository Files
================================================================

================
File: /Users/jess/Desktop/dating-app/app/api/verify/route.ts
================
import { NextRequest, NextResponse } from 'next/server'
import { verifyCloudProof, IVerifyResponse, ISuccessResult } from '@worldcoin/minikit-js'

interface IRequestPayload {
	payload: ISuccessResult
	action: string
	signal: string | undefined
}

export async function POST(req: NextRequest) {
	const { payload, action, signal } = (await req.json()) as IRequestPayload
	const app_id = process.env.APP_ID as `app_${string}`
    console.log(app_id)
	const verifyRes = (await verifyCloudProof(payload, app_id, action, signal)) as IVerifyResponse // Wrapper on this

	if (verifyRes.success) {
		// This is where you should perform backend actions if the verification succeeds
		// Such as, setting a user as "verified" in a database
		return NextResponse.json({ verifyRes, status: 200 })
	} else {
		// This is where you should handle errors from the World ID /verify endpoint.
		// Usually these errors are due to a user having already verified.
		return NextResponse.json({ verifyRes, status: 400 })
	}
}

================
File: /Users/jess/Desktop/dating-app/app/chat/[id]/page.tsx
================
"use client";

import React, { useState, useRef, useEffect } from "react";
import { useParams, useRouter } from "next/navigation";
import { ArrowLeft, Send, Smile, Sticker } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { mockMatches, mockMessages, Message } from "@/data/mockData";
import { formatDistanceToNow } from "date-fns";
import StickerPicker from "@/components/StickerPicker";
import data from "@emoji-mart/data";
import Picker from "@emoji-mart/react";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { NavigationLayout } from "@/components/NavigationLayout";
import Link from "next/link";
import { mockUsers } from "@/app/data/mockData";

const user = mockUsers[0];
const currentUserId = "user-123"; // This matches the userId in mockMatches and mockMessages

export default function ChatPage() {
  const router = useRouter();
  const params = useParams();
  const matchId = params.id as string;
  const [messages, setMessages] = useState<Message[]>([]);
  const [newMessage, setNewMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [showStickerPicker, setShowStickerPicker] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [activeSticker, setActiveSticker] = useState<string | null>(null);
  const [showerParticles, setShowerParticles] = useState<
    Array<{ id: number; x: number; y: number; speed: number }>
  >([]);
  const [isOnline] = useState(Math.random() > 0.7);

  const match = mockMatches.find((m) => m.id === matchId) || {
    id: matchId,
    matchedUserId: "default-user",
    matchedUser: {
      id: "default-user",
      name: "New Match",
      photos: ["https://source.unsplash.com/random/400x600/?portrait"],
    },
    matchDate: new Date().toISOString(),
  };

  useEffect(() => {
    if (matchId && mockMessages[matchId]) {
      setMessages(mockMessages[matchId]);
    } else {
      // Initialize with empty messages array if no messages found
      setMessages([]);
    }
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [matchId]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  if (!user) {
    router.push("/matches");
    return null;
  }

  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault();
    if (!newMessage.trim()) return;

    const newMsg: Message = {
      id: `msg-new-${Date.now()}`,
      matchId: matchId!,
      senderId: currentUserId,
      text: newMessage,
      timestamp: new Date().toISOString(),
      isRead: false,
    };

    setMessages([...messages, newMsg]);
    setNewMessage("");

    // Simulate response after a delay
    setTimeout(() => {
      setIsTyping(true);

      setTimeout(() => {
        const responses = [
          "That's interesting! Tell me more.",
          "I was thinking the same thing!",
          "Haha, you're funny 😊",
          "I'd love to talk about that when we meet.",
          "What are your plans this weekend?",
          "I've been wanting to try that place too!",
        ];

        const responseMsg: Message = {
          id: `msg-response-${Date.now()}`,
          matchId: matchId!,
          senderId: match.matchedUserId,
          text: responses[Math.floor(Math.random() * responses.length)],
          timestamp: new Date().toISOString(),
          isRead: true,
        };

        setIsTyping(false);
        setMessages((prev) => [...prev, responseMsg]);
      }, 3000);
    }, 1000);
  };

  const handleEmojiSelect = (emoji: any) => {
    setNewMessage((prev) => prev + emoji.native);
    setShowEmojiPicker(false);
  };

  const handleStickerSelect = (sticker: any) => {
    const newMsg: Message = {
      id: `msg-new-${Date.now()}`,
      matchId: matchId!,
      senderId: currentUserId,
      text: sticker.image,
      isSticker: true,
      timestamp: new Date().toISOString(),
      isRead: false,
    };

    setMessages([...messages, newMsg]);
    setShowStickerPicker(false);

    // Simulate response with a sticker
    setTimeout(() => {
      setIsTyping(true);

      setTimeout(() => {
        const responseSticker = {
          id: `msg-response-${Date.now()}`,
          matchId: matchId!,
          senderId: match.matchedUserId,
          text: "❤️", // Free heart sticker as response
          isSticker: true,
          timestamp: new Date().toISOString(),
          isRead: true,
        };

        setIsTyping(false);
        setMessages((prev) => [...prev, responseSticker]);
      }, 3000);
    }, 1000);
  };

  const handleStickerClick = (sticker: string) => {
    setActiveSticker(sticker);

    // Create rain particles with increased speed
    const particles = Array.from({ length: 15 }, (_, i) => ({
      id: i,
      x: Math.random() * window.innerWidth,
      y: -50, // Start above the viewport
      speed: Math.random() * 2 + 1, // Increased base speed (was 1)
    }));

    setShowerParticles(particles);

    // Keep the same total duration
    setTimeout(() => {
      setActiveSticker(null);
      setShowerParticles([]);
    }, 4000);
  };

  // Animation frame for rain effect
  useEffect(() => {
    if (!activeSticker) return;

    const animate = () => {
      setShowerParticles((prevParticles) =>
        prevParticles.map((particle) => ({
          ...particle,
          y: particle.y + particle.speed * 2, // Multiply speed by 2 for faster falling
        }))
      );
    };

    const animationFrame = requestAnimationFrame(animate);
    return () => cancelAnimationFrame(animationFrame);
  }, [activeSticker, showerParticles]);

  return (
    <NavigationLayout>
      <div className="flex flex-col h-full pb-16">
        {/* Chat header */}
        <div className="px-4 py-3 border-b flex items-center bg-white">
          <Link href="/matches" className="mr-2">
            <Button variant="ghost" size="icon">
              <ArrowLeft className="h-5 w-5" />
            </Button>
          </Link>
          <div className="flex items-center">
            <div className="h-10 w-10 rounded-full overflow-hidden">
              <img
                src={match.matchedUser.photos[0]}
                alt={match.matchedUser.name}
                className="h-full w-full object-cover"
              />
            </div>
            <div className="ml-3">
              <h3 className="font-semibold">{match.matchedUser.name}</h3>
              <p className="text-xs text-gray-500">
                {isOnline ? "Online now" : "Last active 2h ago"}
              </p>
            </div>
          </div>
        </div>

        {/* Chat messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50 relative">
          {messages.map((message) => {
            const isCurrentUser = message.senderId === currentUserId;
            return (
              <div
                key={message.id}
                className={`flex ${
                  isCurrentUser ? "justify-end" : "justify-start"
                }`}
              >
                <div
                  className={`max-w-[80%] rounded-xl px-4 py-2 ${
                    isCurrentUser
                      ? "bg-dating-purple text-white rounded-tr-none"
                      : "bg-white text-gray-800 rounded-tl-none shadow-sm"
                  }`}
                >
                  {message.isSticker ? (
                    <button
                      onClick={() => handleStickerClick(message.text)}
                      className="text-4xl hover:scale-110 transition-transform duration-200"
                    >
                      {message.text}
                    </button>
                  ) : (
                    <p>{message.text}</p>
                  )}
                  <div
                    className={`text-xs mt-1 ${
                      isCurrentUser ? "text-white/70" : "text-gray-500"
                    }`}
                  >
                    {formatDistanceToNow(new Date(message.timestamp), {
                      addSuffix: true,
                    }).replace('in ', '')}
                  </div>
                </div>
              </div>
            );
          })}

          {/* Sticker rain animation */}
          {activeSticker && (
            <div className="fixed inset-0 pointer-events-none overflow-hidden">
              {showerParticles.map((particle) => (
                <div
                  key={particle.id}
                  className="absolute text-2xl"
                  style={{
                    left: `${particle.x}px`,
                    top: `${particle.y}px`,
                    transform: `rotate(${Math.random() * 30 - 15}deg)`,
                    opacity: 1 - particle.y / window.innerHeight, // Fade out as they fall
                  }}
                >
                  {activeSticker}
                </div>
              ))}
            </div>
          )}

          {/* Typing indicator */}
          {isTyping && (
            <div className="flex justify-start">
              <div className="typing-indicator">
                <div className="typing-indicator-dot"></div>
                <div className="typing-indicator-dot"></div>
                <div className="typing-indicator-dot"></div>
              </div>
            </div>
          )}

          <div ref={messagesEndRef} />
        </div>

        {/* Message input */}
        <form
          onSubmit={handleSendMessage}
          className="border-t p-3 bg-white fixed bottom-20 left-0 right-0 max-w-md mx-auto"
        >
          <div className="flex items-center gap-2">
            <Popover open={showEmojiPicker} onOpenChange={setShowEmojiPicker}>
              <PopoverTrigger asChild>
                <Button type="button" variant="ghost" size="icon">
                  <Smile className="h-5 w-5" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Picker
                  data={data}
                  onEmojiSelect={handleEmojiSelect}
                  theme="light"
                />
              </PopoverContent>
            </Popover>

            <Popover
              open={showStickerPicker}
              onOpenChange={setShowStickerPicker}
            >
              <PopoverTrigger asChild>
                <Button type="button" variant="ghost" size="icon">
                  <Sticker className="h-5 w-5" />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-[300px] p-0">
                <StickerPicker onSelect={handleStickerSelect} />
              </PopoverContent>
            </Popover>

            <Input
              placeholder="Type a message..."
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              className="flex-1 rounded-full"
            />
            <Button
              type="submit"
              size="icon"
              className="rounded-full text-2xl bg-gradient-to-r from-dating-purple to-dating-pink hover:opacity-90"
              disabled={!newMessage.trim()}
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
        </form>
      </div>
    </NavigationLayout>
  );
}

================
File: /Users/jess/Desktop/dating-app/app/data/mockData.ts
================
export interface User {
  id: string;
  name: string;
  photos: string[];
}

export interface Match {
  id: string;
  matchedUserId: string;
  matchedUser: User;
  matchDate: string;
}

export interface Message {
  id: string;
  matchId: string;
  senderId: string;
  text: string;
  timestamp: string;
  isRead: boolean;
  isSticker?: boolean;
}

// Mock users
export const mockUsers: User[] = [
  {
    id: "user1",
    name: "Jessica",
    photos: ["https://source.unsplash.com/random/400x600/?portrait&woman&1"],
  },
  {
    id: "user2",
    name: "Michael",
    photos: ["https://source.unsplash.com/random/400x600/?portrait&man&1"],
  },
];

// Mock matches
export const mockMatches: Match[] = [
  {
    id: "match1",
    matchedUserId: "user2",
    matchedUser: mockUsers[1],
    matchDate: "2024-03-15",
  },
];

// Mock messages
export const mockMessages: { [key: string]: Message[] } = {
  match1: [
    {
      id: "msg1",
      matchId: "match1",
      senderId: "user1",
      text: "Hey there! 👋",
      timestamp: "2024-03-15T10:00:00Z",
      isRead: true,
    },
    {
      id: "msg2",
      matchId: "match1",
      senderId: "user2",
      text: "Hi! How are you?",
      timestamp: "2024-03-15T10:01:00Z",
      isRead: true,
    },
  ],
};

================
File: /Users/jess/Desktop/dating-app/app/matches/page.tsx
================
"use client";
import Image from "next/image";
import Link from "next/link";
import { Badge, Heart, MessageCircle, User } from "lucide-react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { matches } from "@/lib/data";
import { formatDistanceToNow } from "date-fns";
import { mockMatches } from "@/data/mockData";
import { NavigationLayout } from "@/components/NavigationLayout";

export default function MatchesPage() {
  const router = useRouter();
  const sortedMatches = [...mockMatches].sort((a, b) => {
    // First prioritize matches with messages
    if (a.lastMessage && !b.lastMessage) return -1;
    if (!a.lastMessage && b.lastMessage) return 1;

    // Then sort by most recent message or match date
    const aDate = a.lastMessage
      ? new Date(a.lastMessage.timestamp)
      : new Date(a.createdAt);
    const bDate = b.lastMessage
      ? new Date(b.lastMessage.timestamp)
      : new Date(b.createdAt);
    return bDate.getTime() - aDate.getTime();
  });

  return (
    <NavigationLayout>
      <div className="h-full p-4">
        <h1 className="text-2xl font-bold mb-6 text-transparent bg-clip-text bg-gradient-to-r from-dating-purple to-dating-pink">
          Your Matches
        </h1>

        <div className="space-y-1">
          {sortedMatches.map((match) => (
            <div
              key={match.id}
              className="flex items-center p-3 rounded-lg hover:bg-gray-100 cursor-pointer transition-colors"
              onClick={() => router.push(`/chat/${match.id}`)}
            >
              <div className="relative">
                <div className="h-14 w-14 rounded-full overflow-hidden">
                  <img
                    src={match.matchedUser.photos[0]}
                    alt={match.matchedUser.name}
                    className="h-full w-full object-cover"
                  />
                </div>
                {match.lastMessage && !match.lastMessage.isRead && (
                  <div className="absolute -top-1 -right-1 h-4 w-4 bg-dating-pink rounded-full border-2 border-white"></div>
                )}
              </div>

              <div className="ml-3 flex-1 border-b border-gray-100 pb-3">
                <div className="flex justify-between items-start">
                  <h3 className="font-semibold text-gray-900">
                    {match.matchedUser.name}
                  </h3>
                  <span className="text-xs text-gray-500">
                    {match.lastMessage
                      ? formatDistanceToNow(
                          new Date(match.lastMessage.timestamp),
                          { addSuffix: true }
                        ).replace('in ', '')
                      : formatDistanceToNow(new Date(match.createdAt), {
                          addSuffix: true,
                        }).replace('in ', '')}
                  </span>
                </div>

                <div className="flex justify-between mt-1">
                  <p className="text-sm text-gray-500 truncate max-w-[200px]">
                    {match.lastMessage
                      ? match.lastMessage.text
                      : "New match! Say hello 👋"}
                  </p>

                  {/* {!match.lastMessage && (
                  <Badge
                    variant="outline"
                    className="text-xs dating-gradient text-white"
                  >
                    New
                  </Badge>
                )} */}
                </div>
              </div>
            </div>
          ))}
        </div>

        {sortedMatches.length === 0 && (
          <div className="text-center py-10">
            <h3 className="text-xl font-semibold text-gray-600">
              No matches yet
            </h3>
            <p className="text-gray-500 mt-2">
              Keep swiping to find your perfect match!
            </p>
          </div>
        )}
      </div>
    </NavigationLayout>
  );
}

================
File: /Users/jess/Desktop/dating-app/app/profile/edit/page.tsx
================
"use client";

import { useState } from 'react';
import Image from 'next/image';
import { Camera, ArrowLeft, PenToolIcon } from 'lucide-react';
import { NavigationLayout } from '@/components/NavigationLayout';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { useRouter } from 'next/navigation';
import { signAndVerifyMessage } from '@/lib/worldcoin';

// Using the same mock data from profile page
const userProfile = {
  name: 'Emily',
  age: 28,
  location: 'San Francisco, CA',
  bio: 'Free-spirited yogi and coffee connoisseur seeking a partner in crime to explore the citys hidden gems and beyond! 🧘‍♀️',
  photos: [
    'https://img.freepik.com/free-photo/beautiful-asian-girl-sitting-cafe-with-cup-coffee-drawing-digital-tablet-with-graphic-pen-d_1258-120146.jpg?t=st=1743866366~exp=1743869966~hmac=a96e953b960fd017d15f0c504601cdc28768467dca108b03a56df187b5045cda&w=826',
  ],
  interests: [
    'Yoga',
    'Coffee',
    'Travel',
    'Art',
    'Fashion',
    'Wellness',
  ],
  prompts: [
    {
      question: 'A perfect day includes...',
      answer: 'Morning yoga on the beach, followed by a coffee tasting tour, and ending with a sunset picnic in the park.'
    },
    {
      question: 'Best travel story',
      answer: 'Discovering a secluded waterfall in Hawaii and spending the day swimming and meditating in nature.'
    }
  ],
  email: 'emily@example.com',
  isPremium: true
};

export default function EditProfilePage() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    name: userProfile.name,
    age: userProfile.age,
    location: userProfile.location,
    bio: userProfile.bio,
    interests: userProfile.interests.join(', '),
    prompts: userProfile.prompts,
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Here you would typically send the data to your backend
    console.log('Form submitted:', formData);
    router.push('/profile');
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  return (
    <NavigationLayout>
      <div className="flex flex-col min-h-screen bg-gray-50">
        {/* Page Header */}
        <header className="flex justify-between items-center p-4 bg-white border-b">
          <div className="flex items-center">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => router.back()}
              className="mr-2"
            >
              <ArrowLeft className="h-4 w-4" />
            </Button>
            <h1 className="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-dating-purple to-dating-pink">
              Edit Profile
            </h1>
          </div>
          <Button 
              variant="default" 
              size="sm" 
              onClick={async () => {
                await signAndVerifyMessage();
                router.push('/profile');
              }}
            >
              <PenToolIcon className="h-4 w-4 mr-1" />
              Save & Sign
            </Button>
        </header>

        <form onSubmit={handleSubmit} className="px-6 py-8 space-y-6 pb-20">
          {/* Photos Section */}
          <Card>
            <CardContent className="p-6">
              <h3 className="text-lg font-semibold mb-4">Photos</h3>
              <div className="relative h-[300px] mb-4">
                <Image
                  src={userProfile.photos[0]}
                  alt="Profile photo"
                  fill
                  className="object-cover rounded-lg"
                />
                <Button
                  size="icon"
                  variant="secondary"
                  className="absolute bottom-4 right-4"
                >
                  <Camera className="h-4 w-4" />
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Basic Info Section */}
          <Card>
            <CardContent className="p-6 space-y-4">
              <h3 className="text-lg font-semibold mb-4">Basic Information</h3>
              
              <div className="space-y-2">
                <label className="text-sm font-medium">Name</label>
                <Input
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Age</label>
                <Input
                  name="age"
                  type="number"
                  value={formData.age}
                  onChange={handleChange}
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Location</label>
                <Input
                  name="location"
                  value={formData.location}
                  onChange={handleChange}
                />
              </div>
            </CardContent>
          </Card>

          {/* About Section */}
          <Card>
            <CardContent className="p-6 space-y-4">
              <h3 className="text-lg font-semibold mb-4">About</h3>
              
              <div className="space-y-2">
                <label className="text-sm font-medium">Bio</label>
                <Textarea
                  name="bio"
                  value={formData.bio}
                  onChange={handleChange}
                  rows={4}
                />
              </div>

              <div className="space-y-2">
                <label className="text-sm font-medium">Interests (comma-separated)</label>
                <Input
                  name="interests"
                  value={formData.interests}
                  onChange={handleChange}
                  placeholder="e.g., Yoga, Coffee, Travel"
                />
              </div>
            </CardContent>
          </Card>

          {/* Prompts Section */}
          <Card>
            <CardContent className="p-6 space-y-4">
              <h3 className="text-lg font-semibold mb-4">Prompts</h3>
              
              {formData.prompts.map((prompt, index) => (
                <div key={index} className="space-y-2">
                  <label className="text-sm font-medium">{prompt.question}</label>
                  <Textarea
                    name={`prompts.${index}.answer`}
                    value={prompt.answer}
                    onChange={(e) => {
                      const newPrompts = [...formData.prompts];
                      newPrompts[index] = {
                        ...newPrompts[index],
                        answer: e.target.value
                      };
                      setFormData(prev => ({ ...prev, prompts: newPrompts }));
                    }}
                    rows={3}
                  />
                </div>
              ))}
            </CardContent>
          </Card>
        </form>
      </div>
    </NavigationLayout>
  );
}

================
File: /Users/jess/Desktop/dating-app/app/profile/page.tsx
================
"use client";

import { useState } from 'react'
import Image from 'next/image'
import { Camera, Crown, Edit2, MapPin, PenToolIcon, Settings } from 'lucide-react'
import { NavigationLayout } from '@/components/NavigationLayout'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { CardContent } from '@/components/ui/card'
import { Card } from '@/components/ui/card'
import { useRouter } from 'next/navigation'  // Replace the router import
import { signAndVerifyMessage } from '@/lib/worldcoin'
// Mock user data - in a real app, this would come from your backend
const userProfile = {
  name: 'Emily',
  age: 28,
  location: 'San Francisco, CA',
  bio: 'Free-spirited yogi and coffee connoisseur seeking a partner in crime to explore the citys hidden gems and beyond! 🧘‍♀️',
  photos: [
    'https://img.freepik.com/free-photo/beautiful-asian-girl-sitting-cafe-with-cup-coffee-drawing-digital-tablet-with-graphic-pen-d_1258-120146.jpg?t=st=1743866366~exp=1743869966~hmac=a96e953b960fd017d15f0c504601cdc28768467dca108b03a56df187b5045cda&w=826',
  ],
  interests: [
    'Yoga',
    'Coffee',
    'Travel',
    'Art',
    'Fashion',
    'Wellness',
  ],
  prompts: [
    {
      question: 'A perfect day includes...',
      answer: 'Morning yoga on the beach, followed by a coffee tasting tour, and ending with a sunset picnic in the park.'
    },
    {
      question: 'Best travel story',
      answer: 'Discovering a secluded waterfall in Hawaii and spending the day swimming and meditating in nature.'
    }
  ],
  email: 'emily@example.com',
  isPremium: true
}

export default function ProfilePage() {
  const [activePhotoIndex, setActivePhotoIndex] = useState(0)
  const router = useRouter()  // Initialize the router hook

  return (
    <NavigationLayout>
      <div className="flex flex-col min-h-screen">
        {/* Page Header */}
        <header className="flex justify-between items-center p-4 bg-white">
          <h1 className="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-dating-purple to-dating-pink">
            My Profile
          </h1>
          <div className="flex items-center">
            <div className="flex items-center">
              <Button 
                variant="ghost" 
                size="sm" 
                className="text-gray-500 mr-2"
                onClick={() => router.push('/settings')}
              >
                <Settings className="h-4 w-4" />
              </Button>
              <Button
                size="icon"
                variant="ghost"
                className="text-gray-500 mr-2"
                onClick={() => router.push('/profile/edit')}
              >
                <Edit2 className="h-5 w-5" />
              </Button>
            </div>

            
          </div>
        </header>
        {/* Profile Header */}
        <div className="relative h-[70vh] min-h-[500px]">
          <Image
            src={userProfile.photos[activePhotoIndex]}
            alt={`${userProfile.name}'s photo`}
            fill
            className="object-cover"
            priority
          />
          <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent" />
          
          {/* Photo Navigation Dots */}
          <div className="absolute top-4 left-0 right-0">
            <div className="flex justify-center gap-2">
              {userProfile.photos.map((_, index) => (
                <button
                  key={index}
                  onClick={() => setActivePhotoIndex(index)}
                  className={`w-2 h-2 rounded-full transition-colors ${
                    index === activePhotoIndex ? 'bg-white' : 'bg-white/50'
                  }`}
                />
              ))}
            </div>
          </div>

          
          {/* Profile Info */}
          <div className="absolute bottom-0 left-0 right-0 p-6 text-white">
            <h1 className="text-3xl font-bold mb-2">
              {userProfile.name}, {userProfile.age}
            </h1>
            <div className="flex items-center text-white/90">
              <MapPin className="h-4 w-4 mr-2" />
              {userProfile.location}
            </div>
          </div>
        </div>

        {/* Profile Content */}
        <div className="px-6 py-8 space-y-6 pb-20">
          {/* Account Section */}
          <Card>
            <CardContent className="p-6">
              <h3 className="text-lg font-semibold mb-4">Account</h3>
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Email</span>
                  <span className="text-gray-900">{userProfile.email}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Account Type</span>
                  <span className={userProfile.isPremium ? "text-amber-500 font-medium" : "text-gray-900"}>
                    {userProfile.isPremium ? "Premium" : "Basic"}
                  </span>
                </div>
                <Button 
                  className="w-full mt-2 premium-badge text-white"
                  onClick={() => router.push("/purchased-features")}
                >
                  <Crown className="h-4 w-4 mr-2" /> 
                  View Premium Features
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* About Section */}
          <Card>
            <CardContent className="p-6 space-y-6">
              <div>
                <h2 className="text-lg font-semibold mb-3">About</h2>
                <p className="text-gray-600">{userProfile.bio}</p>
              </div>

              <div>
                <h2 className="text-lg font-semibold mb-3">Interests</h2>
                <div className="flex flex-wrap gap-2">
                  {userProfile.interests.map((interest, index) => (
                    <Badge
                      key={index}
                      variant="secondary"
                      className="bg-gray-100 text-gray-800 px-3 py-1"
                    >
                      {interest}
                    </Badge>
                  ))}
                </div>
              </div>

              <div>
                <h2 className="text-lg font-semibold mb-3">Prompts</h2>
                <div className="space-y-4">
                  {userProfile.prompts.map((prompt, index) => (
                    <div key={index} className="bg-gray-50 p-4 rounded-lg">
                      <p className="font-medium text-gray-900 mb-2">
                        {prompt.question}
                      </p>
                      <p className="text-gray-600">{prompt.answer}</p>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </NavigationLayout>
  );
}

================
File: /Users/jess/Desktop/dating-app/app/purchased-features/page.tsx
================
"use client";

import { useState } from "react";
import {
  ArrowLeft,
  CreditCard,
  Crown,
  EyeOff,
  Heart,
  Star,
  Undo2,
  Zap,
} from "lucide-react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { useToast } from "@/components/ui/use-toast";
import { NavigationLayout } from "@/components/NavigationLayout";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { payWithWorldcoin } from "@/lib/worldcoin";

export default function PurchasedFeaturesPage() {
  const router = useRouter();
  const { toast } = useToast();

  const [premiumFeatures] = useState([
    {
      id: 1,
      name: "Super Likes",
      description: "5 Super Likes per day",
      icon: "Star",
      remaining: 5,
      resetsAt: "Tomorrow at 12:00 AM",
      active: true,
    },
    {
      id: 2,
      name: "Boosts",
      description: "Get more visibility for 30 minutes",
      icon: "Zap",
      remaining: 2,
      expiresAt: null,
      active: true,
    },
    {
      id: 3,
      name: "Rewinds",
      description: "Go back to profiles you passed",
      icon: "Undo2",
      unlimited: true,
      active: true,
    },
    {
      id: 4,
      name: "Incognito Mode",
      description: "Browse profiles without being seen",
      icon: "EyeOff",
      expiresAt: "May 4, 2025",
      active: true,
    },
    {
      id: 5,
      name: "See Who Likes You",
      description: "View all users who liked your profile",
      icon: "Heart",
      active: true,
    },
  ]);

  return (
    <NavigationLayout>
      <div className="pb-20">
        <div className="sticky top-0 z-10 bg-white border-b p-4 flex items-center">
          <Button variant="ghost" size="icon" onClick={() => router.back()}>
            <ArrowLeft className="h-5 w-5" />
          </Button>
          <h1 className="text-xl font-bold ml-4">Your Premium Features</h1>
        </div>

        <div className="p-4">
          <div className="text-center mb-6">
            <div className="inline-block p-3 rounded-full premium-badge bg-pink-600 mb-4">
              <Crown className="h-8 w-8 text-white" />
            </div>
            <h2 className="text-2xl font-bold">Premium Features</h2>
            <p className="text-gray-500 mt-1">
              Purchase directly on chain, with World Coin.
            </p>
          </div>

          <Tabs defaultValue="purchase" className="w-full">
            <TabsList className="grid w-full grid-cols-2 mb-4">
              <TabsTrigger value="purchase">Subscription</TabsTrigger>
              <TabsTrigger value="features">Features</TabsTrigger>
            </TabsList>

            <TabsContent value="features">
              <Card className="mb-6">
                <CardContent className="p-4">
                  {/* <div className="flex justify-between items-center mb-4">
                    <h3 className="font-semibold">Your Features</h3>
                    <Button variant="outline" size="sm" className="text-pink-600" onClick={() => toast({ description: "This feature is not implemented yet :d", variant: "default" })}>
                      Manage Subscription
                    </Button>
                  </div> */}

                  {premiumFeatures.length > 0 ? (
                    <div className="space-y-4">
                      {premiumFeatures.map((feature) => (
                        <div
                          key={feature.id}
                          className="flex items-start p-3 border rounded-lg"
                        >
                          <div className="bg-pink-100 p-2 rounded-full mr-3">
                            {feature.icon === "Star" && (
                              <Star className="h-5 w-5 text-pink-600" />
                            )}
                            {feature.icon === "Zap" && (
                              <Zap className="h-5 w-5 text-pink-600" />
                            )}
                            {feature.icon === "Undo2" && (
                              <Undo2 className="h-5 w-5 text-pink-600" />
                            )}
                            {feature.icon === "EyeOff" && (
                              <EyeOff className="h-5 w-5 text-pink-600" />
                            )}
                            {feature.icon === "Heart" && (
                              <Heart className="h-5 w-5 text-pink-600" />
                            )}
                          </div>
                          <div className="flex-1">
                            <div className="flex justify-between">
                              <h4 className="font-medium">{feature.name}</h4>
                              {feature.active ? (
                                <span className="text-xs bg-green-100 text-green-800 px-2 py-0.5 rounded-full">
                                  Active
                                </span>
                              ) : (
                                <span className="text-xs bg-gray-100 text-gray-800 px-2 py-0.5 rounded-full">
                                  Inactive
                                </span>
                              )}
                            </div>
                            <p className="text-sm text-gray-500 mt-1">
                              {feature.description}
                            </p>

                            {feature.remaining && (
                              <div className="mt-2 flex items-center">
                                <span className="text-xs text-gray-500 mr-2">
                                  Remaining: {feature.remaining}
                                </span>
                                {feature.resetsAt && (
                                  <span className="text-xs text-gray-500">
                                    Resets: {feature.resetsAt}
                                  </span>
                                )}
                              </div>
                            )}

                            {feature.unlimited && (
                              <div className="mt-2">
                                <span className="text-xs text-gray-500">
                                  Unlimited usage
                                </span>
                              </div>
                            )}

                            {feature.expiresAt && (
                              <div className="mt-2">
                                <span className="text-xs text-gray-500">
                                  Expires: {feature.expiresAt}
                                </span>
                              </div>
                            )}

                            <div className="mt-3 flex items-center justify-between">
                              {feature.icon === "Zap" && feature.active ? (
                                <Button
                                  size="sm"
                                  className="bg-pink-600 hover:bg-pink-700"
                                >
                                  <Zap className="h-3 w-3 mr-1" /> Use Boost
                                </Button>
                              ) : feature.icon === "Zap" && !feature.active ? (
                                <div className="flex items-center justify-between w-full">
                                  <div className="text-sm font-medium">
                                    $4.99 per boost
                                  </div>
                                  <Button
                                    size="sm"
                                    className="bg-pink-600 hover:bg-pink-700"
                                    onClick={() => router.push("/app/premium")}
                                  >
                                    Buy Now
                                  </Button>
                                </div>
                              ) : feature.icon === "Star" && !feature.active ? (
                                <div className="flex items-center justify-between w-full">
                                  <div className="text-sm font-medium">
                                    $3.99 for 5
                                  </div>
                                  <Button
                                    size="sm"
                                    className="bg-pink-600 hover:bg-pink-700"
                                    onClick={() => router.push("/app/premium")}
                                  >
                                    Buy Now
                                  </Button>
                                </div>
                              ) : !feature.active ? (
                                <div className="flex items-center justify-between w-full">
                                  <div className="text-sm font-medium">
                                    From $4.99/month
                                  </div>
                                  <Button
                                    size="sm"
                                    className="bg-pink-600 hover:bg-pink-700"
                                    onClick={() => router.push("/app/premium")}
                                  >
                                    Subscribe
                                  </Button>
                                </div>
                              ) : null}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-6">
                      <div className="bg-gray-100 inline-flex p-3 rounded-full mb-3">
                        <CreditCard className="h-6 w-6 text-gray-400" />
                      </div>
                      <h4 className="font-medium">No Premium Features</h4>
                      <p className="text-sm text-gray-500 mt-1">
                        You haven't purchased any premium features yet.
                      </p>
                      <div className="mt-4 space-y-3">
                        <div className="p-3 border rounded-lg">
                          <div className="flex justify-between items-center mb-2">
                            <h4 className="font-medium">
                              Premium Subscription
                            </h4>
                            <span className="text-sm font-bold">
                              From $4.99/mo
                            </span>
                          </div>
                          <p className="text-sm text-gray-500 mb-3">
                            Unlock all premium features and enhance your dating
                            experience
                          </p>
                          <Button
                            className="w-full bg-pink-600 hover:bg-pink-700"
                            onClick={() => router.push("/app/premium")}
                          >
                            Upgrade to Premium
                          </Button>
                        </div>

                        <div className="p-3 border rounded-lg">
                          <div className="flex justify-between items-center mb-2">
                            <h4 className="font-medium">Boosts</h4>
                            <span className="text-sm font-bold">
                              $4.99 each
                            </span>
                          </div>
                          <p className="text-sm text-gray-500 mb-3">
                            Get more visibility for 30 minutes
                          </p>
                          <Button
                            className="w-full bg-pink-600 hover:bg-pink-700"
                            onClick={() => router.push("/app/premium")}
                          >
                            Buy Boosts
                          </Button>
                        </div>

                        <div className="p-3 border rounded-lg">
                          <div className="flex justify-between items-center mb-2">
                            <h4 className="font-medium">Super Likes</h4>
                            <span className="text-sm font-bold">
                              $3.99 for 5
                            </span>
                          </div>
                          <p className="text-sm text-gray-500 mb-3">
                            Stand out from the crowd
                          </p>
                          <Button
                            className="w-full bg-pink-600 hover:bg-pink-700"
                            onClick={() => router.push("/app/premium")}
                          >
                            Buy Super Likes
                          </Button>
                        </div>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="purchase">
              <Card className="mb-6">
                <CardContent className="p-4">
                  <h3 className="font-semibold mb-3">Subscription Plans</h3>
                  <div className="space-y-4">
                    {[
                      {
                        id: "monthly",
                        name: "Monthly",
                        price: "WLD 7.99/mo",
                        totalPrice: "WLD 7.99 billed monthly",
                        features: "All premium features",
                        popular: false,
                      },
                      {
                        id: "biannual",
                        name: "6 Months",
                        price: "WLD 4.99/mo",
                        totalPrice: "WLD 29.94 billed every 6 months",
                        features: "All premium features + Incognito Mode",
                        popular: true,
                        savings: "Save 30%",
                      },
                      {
                        id: "annual",
                        name: "Yearly",
                        price: "WLD 2.99/mo",
                        totalPrice: "WLD35.88 billed annually",
                        features:
                          "All premium features + Incognito Mode + Priority Support",
                        popular: false,
                        savings: "Save 50%",
                      },
                    ].map((plan) => (
                      <div
                        key={plan.id}
                        className={`p-3 border rounded-lg relative ${
                          plan.popular ? "border-pink-600" : ""
                        }`}
                      >
                        {plan.popular && (
                          <div className="absolute top-0 right-0 bg-pink-600 text-white text-xs px-2 py-0.5 rounded-bl-lg">
                            Most Popular
                          </div>
                        )}
                        <div className="flex justify-between items-center mb-1">
                          <h4 className="font-medium">{plan.name}</h4>
                          <div className="text-right">
                            <div className="font-bold">{plan.price}</div>
                            {plan.totalPrice && (
                              <div className="text-xs text-gray-500">
                                {plan.totalPrice}
                              </div>
                            )}
                          </div>
                        </div>
                        <p className="text-sm text-gray-500 mb-2">
                          {plan.features}
                        </p>
                        {plan.savings && (
                          <div className="mb-2">
                            <span className="text-xs bg-pink-100 text-pink-800 px-2 py-0.5 rounded-full">
                              {plan.savings}
                            </span>
                          </div>
                        )}
                        <Button
                          className="w-full bg-pink-600 hover:bg-pink-700"
                          onClick={() => {
                            const price = parseFloat(
                              plan.totalPrice.match(/[\d,.]+/g)?.[0].replace(/,/g, "") || "0"
                            );
                            const name = plan.name;

                            if (!isNaN(price) && name) {
                              payWithWorldcoin(price, name);
                            } else {
                              console.error(
                                "Selected plan price or name is invalid."
                              );
                            }
                          }}
                        >
                          Subscribe with Worldcoin
                        </Button>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <h3 className="font-semibold mb-3">Purchase History</h3>
                  <div className="space-y-3">
                    <div className="flex justify-between items-center p-3 border rounded-lg">
                      <div>
                        <h4 className="font-medium">Premium Subscription</h4>
                        <p className="text-xs text-gray-500">Apr 4, 2025</p>
                      </div>
                      <span className="text-sm">$9.99</span>
                    </div>
                    <div className="flex justify-between items-center p-3 border rounded-lg">
                      <div>
                        <h4 className="font-medium">5 Boosts Pack</h4>
                        <p className="text-xs text-gray-500">Mar 28, 2025</p>
                      </div>
                      <span className="text-sm">$14.99</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </NavigationLayout>
  );
}

================
File: /Users/jess/Desktop/dating-app/app/settings/page.tsx
================
'use client'

import { NavigationLayout } from '@/components/NavigationLayout'
import React, { useState } from "react";
import { useRouter } from "next/navigation";
import { ArrowLeft, Shield, Bell, User, MapPin, Eye, Sliders, ChevronRight, ToggleLeft, ToggleRight } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Slider } from "@/components/ui/slider";
import { useToast } from "@/components/ui/use-toast";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/ui/dialog";


export default function SettingsPage() {
  const router = useRouter();
  const { toast } = useToast();  
  const [notificationsEnabled, setNotificationsEnabled] = useState(true);
  const [incognitoMode, setIncognitoMode] = useState(false);
  const [distanceRadius, setDistanceRadius] = useState([25]);
  const [ageRange, setAgeRange] = useState([21, 35]);
  const [showBlockDialog, setShowBlockDialog] = useState(false);
  const [showReportDialog, setShowReportDialog] = useState(false);
  const [blockReason, setBlockReason] = useState("");
  const [reportReason, setReportReason] = useState("");
  
//   const handleIncognitoToggle = () => {
//     if (!user?.isPremium && !incognitoMode) {
//       toast({
//         title: "Premium Feature",
//         description: "Incognito Mode is only available to premium subscribers.",
//         duration: 3000,
//       });
//       return;
//     }
//     setIncognitoMode(!incognitoMode);
//   };
  
  const blockReasons = [
    "I'm not interested in this person",
    "Inappropriate messages or behavior",
    "Fake profile or spam",
    "Harassing or threatening behavior",
    "Other reason",
  ];
  
  const reportReasons = [
    "Fake profile or scam",
    "Inappropriate photos or content",
    "Underage user",
    "Harassing or threatening behavior",
    "Hate speech, racism, or discrimination",
    "Violence or dangerous behavior",
    "Other concern",
  ];
  
  return (
    <NavigationLayout>
       <div className="pb-20">
      <div className="sticky top-0 z-10 bg-white border-b p-4 flex items-center">
        <Button variant="ghost" size="icon" onClick={() => router.back()}>
          <ArrowLeft className="h-5 w-5" />
        </Button>
        <h1 className="text-xl font-bold ml-4">Settings</h1>
      </div>

      <div className="divide-y">
        <section className="p-4">
          <h2 className="text-lg font-semibold mb-3 flex items-center">
            <Shield className="h-5 w-5 mr-2 text-dating-purple" />
            Safety & Privacy
          </h2>
          
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="font-medium">Incognito Mode</p>
                <p className="text-sm text-gray-500">
                  Browse without being shown to others
                </p>
              </div>
              <div onClick={()=>{}} className="cursor-pointer">
                {incognitoMode ? 
                  <ToggleRight className="h-7 w-7 text-dating-purple" /> : 
                  <ToggleLeft className="h-7 w-7 text-gray-400" />
                }
              </div>
            </div>
            
            <Button 
              variant="outline" 
              className="w-full justify-between"
              onClick={() => setShowBlockDialog(true)}
            >
              <span>Block Users</span>
              <ChevronRight className="h-4 w-4" />
            </Button>
            
            <Button 
              variant="outline" 
              className="w-full justify-between"
              onClick={() => setShowReportDialog(true)}
            >
              <span>Report a Concern</span>
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
        </section>
        
        <section className="p-4">
          <h2 className="text-lg font-semibold mb-3 flex items-center">
            <Bell className="h-5 w-5 mr-2 text-dating-purple" />
            Notifications
          </h2>
          
          <div className="flex items-center justify-between">
            <Label htmlFor="notifications" className="cursor-pointer">
              Enable Push Notifications
            </Label>
            <Switch
              id="notifications"
              checked={notificationsEnabled}
              onCheckedChange={setNotificationsEnabled}
            />
          </div>
        </section>
        
        <section className="p-4">
          <h2 className="text-lg font-semibold mb-3 flex items-center">
            <User className="h-5 w-5 mr-2 text-dating-purple" />
            Discovery Preferences
          </h2>
          
          <div className="space-y-6">
            <div>
              <div className="flex justify-between mb-2">
                <Label>Age Range</Label>
                <span className="text-sm">
                  {ageRange[0]} - {ageRange[1]}
                </span>
              </div>
              <Slider
                defaultValue={ageRange}
                min={18}
                max={65}
                step={1}
                onValueChange={setAgeRange}
                className="my-4"
              />
            </div>
            
            <div>
              <div className="flex justify-between mb-2">
                <Label>Distance</Label>
                <span className="text-sm">
                  {distanceRadius[0]} miles
                </span>
              </div>
              <Slider
                defaultValue={distanceRadius}
                min={1}
                max={100}
                step={1}
                onValueChange={setDistanceRadius}
                className="my-4"
              />
            </div>
            
            <Button 
              variant="outline" 
              className="w-full justify-between"
              onClick={() => {
                toast({
                  title: "Coming Soon",
                  description: "Advanced filters will be available in the next update.",
                });
              }}
            >
              <span>Advanced Filters</span>
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
        </section>
        
        <section className="p-4">
          <h2 className="text-lg font-semibold mb-3 flex items-center">
            <MapPin className="h-5 w-5 mr-2 text-dating-purple" />
            Location
          </h2>
          
          <div>
            <p className="text-sm mb-2">Current Location</p>
            <p className="font-medium">San Francisco, CA</p>
            
            <Button 
              variant="outline" 
              className="w-full mt-3 justify-between"
              onClick={() => {
                toast({
                  title: "Premium Feature",
                  description: "Changing your location is a premium feature.",
                });
              }}
            >
              <span>Change Location</span>
              <ChevronRight className="h-4 w-4" />
            </Button>
          </div>
        </section>
      </div>
      
      {/* Block Dialog */}
      <Dialog open={showBlockDialog} onOpenChange={setShowBlockDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Block a User</DialogTitle>
            <DialogDescription>
              Blocked users won't be able to see your profile or message you.
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-2 my-4">
            <Label>Select a Reason</Label>
            <div className="space-y-2">
              {blockReasons.map((reason) => (
                <div 
                  key={reason}
                  className={`p-3 border rounded-md cursor-pointer ${
                    blockReason === reason ? "border-dating-purple bg-dating-purple/5" : ""
                  }`}
                  onClick={() => setBlockReason(reason)}
                >
                  {reason}
                </div>
              ))}
            </div>
          </div>
          
          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => setShowBlockDialog(false)}
            >
              Cancel
            </Button>
            <Button 
              variant="destructive"
              onClick={() => {
                toast({
                  title: "User Blocked",
                  description: "You won't see this user anymore.",
                });
                setShowBlockDialog(false);
              }}
              disabled={!blockReason}
            >
              Block User
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* Report Dialog */}
      <Dialog open={showReportDialog} onOpenChange={setShowReportDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Report a Concern</DialogTitle>
            <DialogDescription>
              We take your safety seriously. Please let us know what's happening.
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-2 my-4">
            <Label>What would you like to report?</Label>
            <div className="space-y-2">
              {reportReasons.map((reason) => (
                <div 
                  key={reason}
                  className={`p-3 border rounded-md cursor-pointer ${
                    reportReason === reason ? "border-dating-purple bg-dating-purple/5" : ""
                  }`}
                  onClick={() => setReportReason(reason)}
                >
                  {reason}
                </div>
              ))}
            </div>
          </div>
          
          <DialogFooter>
            <Button 
              variant="outline" 
              onClick={() => setShowReportDialog(false)}
            >
              Cancel
            </Button>
            <Button 
              onClick={() => {
                toast({
                  title: "Report Submitted",
                  description: "Thank you for helping keep our community safe. We'll review your report.",
                });
                setShowReportDialog(false);
              }}
              disabled={!reportReason}
            >
              Submit Report
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
    </NavigationLayout>
  )
}

================
File: /Users/jess/Desktop/dating-app/app/swipe/page.tsx
================
'use client'

import React, { useState, useRef, useEffect, TouchEvent } from "react";
import { ChevronDown, X, Heart, Star, Undo } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { mockProfiles, Profile } from "@/data/mockData";
import { useToast } from "@/components/ui/use-toast";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { useIsMobile } from "@/hooks/use-mobile";
import { NavigationLayout } from '@/components/NavigationLayout'
import { useRouter } from 'next/navigation'  // Replace the router import


export const SwipePage: React.FC = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showMatch, setShowMatch] = useState(false);
  const [matchedProfile, setMatchedProfile] = useState<Profile | null>(null);
  const [direction, setDirection] = useState<"left" | "right" | null>(null);
  const cardRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();
  const isMobile = useIsMobile();
  const router = useRouter();
  // Touch gesture states
  const [touchStart, setTouchStart] = useState({ x: 0, y: 0 });
  const [touchEnd, setTouchEnd] = useState({ x: 0, y: 0 });
  const [isSwiping, setIsSwiping] = useState(false);
  const [swipeOffset, setSwipeOffset] = useState(0);

  // Add new state for mouse tracking
  const [isMouseDown, setIsMouseDown] = useState(false);
  const [mouseStart, setMouseStart] = useState({ x: 0, y: 0 });

  const currentProfile = mockProfiles[currentIndex];

  const handleSwipe = (liked: boolean) => {
    setDirection(liked ? "right" : "left");
    
    // Simulate 30% chance of match if liked
    const isMatch = liked && Math.random() < 0.6;
    
    setTimeout(() => {
      if (isMatch) {
        setMatchedProfile(currentProfile);
        setShowMatch(true);
      }
      
      // Move to next profile
      setDirection(null);
      if (currentIndex < mockProfiles.length - 1) {
        setCurrentIndex(currentIndex + 1);
      } else {
        // Reset to first profile for demo purposes
        setCurrentIndex(0);
      }
    }, 500);
  };

  const handleSuperLike = () => {
    toast({
      title: "Super Like Used!",
      description: "This is a premium feature. You've used 1 of your 5 daily Super Likes.",
      duration: 3000,
    });
    
    // Higher chance of match with super like
    const isMatch = Math.random() < 0.8;
    
    if (isMatch) {
      setMatchedProfile(currentProfile);
      setShowMatch(true);
    }
    
    if (currentIndex < mockProfiles.length - 1) {
      setCurrentIndex(currentIndex + 1);
    } else {
      setCurrentIndex(0);
    }
  };

  const handleRewind = () => {
    toast({
      title: "Premium Feature",
      description: "Upgrade to Premium to unlock Rewind and go back to the previous profile.",
      duration: 3000,
    });
  };

  // Handle touch start
  const handleTouchStart = (e: TouchEvent) => {
    setTouchStart({
      x: e.touches[0].clientX,
      y: e.touches[0].clientY
    });
    setIsSwiping(true);
  };

  // Handle touch move
  const handleTouchMove = (e: TouchEvent) => {
    if (!isSwiping) return;
    
    const currentX = e.touches[0].clientX;
    const diff = currentX - touchStart.x;
    
    // Limit the drag distance
    const maxOffset = window.innerWidth * 0.4;
    const limitedOffset = Math.max(Math.min(diff, maxOffset), -maxOffset);
    
    setSwipeOffset(limitedOffset);
    setTouchEnd({
      x: currentX,
      y: e.touches[0].clientY
    });
  };

  // Handle touch end
  const handleTouchEnd = () => {
    if (!isSwiping) return;
    
    setIsSwiping(false);
    const diffX = touchEnd.x - touchStart.x;
    const threshold = window.innerWidth * 0.15; // 15% of screen width
    
    // Reset swipe offset
    setSwipeOffset(0);
    
    // Determine if swipe was significant enough
    if (Math.abs(diffX) > threshold) {
      if (diffX > 0) {
        // Swipe right (like)
        handleSwipe(true);
      } else {
        // Swipe left (dislike)
        handleSwipe(false);
      }
    }
  };

  // Handle mouse down
  const handleMouseDown = (e: React.MouseEvent) => {
    setIsMouseDown(true);
    setIsSwiping(true);
    setMouseStart({
      x: e.clientX,
      y: e.clientY
    });
    setTouchStart({
      x: e.clientX,
      y: e.clientY
    });
  };

  // Handle mouse move
  const handleMouseMove = (e: React.MouseEvent) => {
    if (!isMouseDown) return;
    
    const currentX = e.clientX;
    const diff = currentX - mouseStart.x;
    
    // Limit the drag distance
    const maxOffset = window.innerWidth * 0.4;
    const limitedOffset = Math.max(Math.min(diff, maxOffset), -maxOffset);
    
    setSwipeOffset(limitedOffset);
    setTouchEnd({
      x: currentX,
      y: e.clientY
    });
  };

  // Handle mouse up
  const handleMouseUp = () => {
    if (!isMouseDown) return;
    
    setIsMouseDown(false);
    setIsSwiping(false);
    const diffX = touchEnd.x - touchStart.x;
    const threshold = window.innerWidth * 0.15; // 15% of screen width
    
    // Reset swipe offset
    setSwipeOffset(0);
    
    // Determine if swipe was significant enough
    if (Math.abs(diffX) > threshold) {
      if (diffX > 0) {
        handleSwipe(true);
      } else {
        handleSwipe(false);
      }
    }
  };

  // Add useEffect to handle mouse up outside the card
  useEffect(() => {
    const handleGlobalMouseUp = () => {
      if (isMouseDown) {
        handleMouseUp();
      }
    };

    window.addEventListener('mouseup', handleGlobalMouseUp);
    return () => {
      window.removeEventListener('mouseup', handleGlobalMouseUp);
    };
  }, [isMouseDown, touchEnd.x, touchStart.x]);

  return (
    <div className="flex flex-col h-[100vh]">
      {/* Fixed Header */}
      <header className="flex justify-between items-center p-4 bg-white">
        <h1 className="text-2xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-dating-purple to-dating-pink">
          Discover
        </h1>
        <Button 
          variant="ghost" 
          size="sm" 
          className="text-gray-500"
          onClick={() => toast({
            title: "Filters",
            description: "Filter functionality will be available in the next version!",
          })
        }
        disabled={true}
        >
          Filters <ChevronDown className="ml-1 h-4 w-4" />
        </Button>
      </header>

      {/* Scrollable Profile Card Area */}
      <div className="flex-1 overflow-hidden px-4">
        <div className="h-[80vh]">
          {/* Profile Card */}
          <div 
            ref={cardRef}
            className={`profile-card h-full rounded-xl shadow-lg ${
              direction === "left" 
                ? "animate-swipe-left" 
                : direction === "right" 
                ? "animate-swipe-right" 
                : ""
            }`}
            style={{
              transform: isSwiping ? `translateX(${swipeOffset}px) rotate(${swipeOffset * 0.03}deg)` : '',
              transition: isSwiping ? 'none' : 'transform 0.3s ease',
              cursor: isMouseDown ? 'grabbing' : 'grab'
            }}
            onTouchStart={handleTouchStart}
            onTouchMove={handleTouchMove}
            onTouchEnd={handleTouchEnd}
            onMouseDown={handleMouseDown}
            onMouseMove={handleMouseMove}
            onMouseUp={handleMouseUp}
          >
            {/* Profile Content - Make this section scrollable */}
            <div className="h-full overflow-y-auto">
              {/* Profile Image Section */}
              <div 
                className="relative h-[60vh] min-h-[400px] flex-shrink-0"
                style={{
                  backgroundImage: `url(${currentProfile.photos[0]})`,
                  backgroundSize: 'cover',
                  backgroundPosition: 'center',
                }}
              >
                {/* Gradient overlay for text readability */}
                <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent" />

                {/* Basic Profile Info */}
                <div className="absolute bottom-0 left-0 right-0 p-4 text-white">
                  <div className="flex items-center justify-between">
                    <div>
                      <h2 className="text-3xl font-bold">{currentProfile.name}, {currentProfile.age}</h2>
                      <p className="text-sm opacity-90">{currentProfile.location} • {currentProfile.distance} miles away</p>
                    </div>
                    <Button
                      variant="ghost"
                      size="icon"
                      className="h-10 w-10 rounded-full bg-white/20 hover:bg-white/30 backdrop-blur-sm text-white"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleSuperLike();
                      }}
                    >
                      <Star className="h-5 w-5" />
                    </Button>
                  </div>
                </div>
              </div>

              {/* Scrollable Profile Details Section */}
              <div className="bg-white p-4">
                <p className="text-gray-800 text-lg mb-4">{currentProfile.bio}</p>
                
                <div className="flex flex-wrap gap-2 my-4">
                  {currentProfile.interests.map((interest, index) => (
                    <Badge key={index} variant="secondary" className="bg-gray-100 text-gray-800">
                      {interest}
                    </Badge>
                  ))}
                </div>

                <div className="space-y-4">
                  {currentProfile.prompts.map((prompt, index) => (
                    <div key={index} className="bg-gray-50 p-4 rounded-lg">
                      <p className="text-sm font-bold text-gray-700">{prompt.question}</p>
                      <p className="text-gray-600 mt-2">{prompt.answer}</p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Fixed Bottom Section */}
      <div className="bg-white px-4 py-2">
        {/* Swipe Instruction (only shown on mobile) */}
        {isMobile && (
          <div className="text-center text-sm text-gray-500 mb-2 animate-pulse">
            Swipe right to like, left to pass
          </div>
        )}
      </div>

      {/* Match Dialog */}
      <Dialog open={showMatch} onOpenChange={setShowMatch}>
        <DialogContent className="bg-gradient-to-br from-dating-purple to-dating-pink text-white border-0 max-w-md rounded-xl animate-match-popup">
          <DialogHeader className="text-center pt-6">
            <div className="flex justify-center">
              <Heart className="h-20 w-20 animate-pulse-heart text-white" />
            </div>
            <DialogTitle className="text-3xl font-bold mt-4">It's a Match!</DialogTitle>
            <DialogDescription className="text-white/90 text-lg">
              You and {matchedProfile?.name} liked each other
            </DialogDescription>
          </DialogHeader>
          
          <div className="flex justify-center space-x-4 my-6">
            <div className="h-24 w-24 rounded-full border-4 border-white overflow-hidden">
              <img 
                src='https://img.freepik.com/free-photo/beautiful-asian-girl-sitting-cafe-with-cup-coffee-drawing-digital-tablet-with-graphic-pen-d_1258-120146.jpg?t=st=1743866366~exp=1743869966~hmac=a96e953b960fd017d15f0c504601cdc28768467dca108b03a56df187b5045cda&w=826'
                className="h-full w-full object-cover"
              />
            </div>
            <div className="h-24 w-24 rounded-full border-4 border-white overflow-hidden">
              <img 
                src={matchedProfile?.photos[0]} 
                alt={matchedProfile?.name} 
                className="h-full w-full object-cover"
              />
            </div>
          </div>
          
          <div className="flex space-x-3 mt-2">
            <Button 
              className="flex-1 bg-white hover:bg-gray-100 text-dating-purple"
              onClick={() => setShowMatch(false)}
            >
              Keep Swiping
            </Button>
            <Button 
              className="flex-1 bg-white hover:bg-gray-100 text-dating-purple"
              onClick={() => {
                setShowMatch(false);
                router.push('/matches'); // Navigate to matches page
              }}
            >
              Send Message
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default function SwipePageWrapper() {
  return (
    <NavigationLayout>
      <SwipePage />
    </NavigationLayout>
  )
}

================
File: /Users/jess/Desktop/dating-app/app/verify/page.tsx
================
'use client'

import { VerifyHumanity } from '@/components/VerifyHumanity'
// import { useVerification } from '@/contexts/verification-context'

export default function VerifyPage() {
//   const { setVerified } = useVerification()

//   const handleVerificationSuccess = () => {
//     setVerified(true)
//   }

  return (
    <div className="min-h-screen">
      <VerifyHumanity onVerificationSuccess={()=>{}} />
    </div>
  )
}

================
File: /Users/jess/Desktop/dating-app/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 285 80% 50%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 325 90% 70%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 285 80% 50%;

    --radius: 0.75rem;

    --sidebar-background: 0 0% 98%;

    --sidebar-foreground: 240 5.3% 26.1%;

    --sidebar-primary: 240 5.9% 10%;

    --sidebar-primary-foreground: 0 0% 98%;

    --sidebar-accent: 240 4.8% 95.9%;

    --sidebar-accent-foreground: 240 5.9% 10%;

    --sidebar-border: 220 13% 91%;

    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 285 80% 50%;
    --primary-foreground: 210 40% 98%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 325 90% 70%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 285 80% 50%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }
}

@layer components {
  .dating-gradient {
    @apply bg-gradient-to-r from-dating-purple to-dating-pink;
  }
  
  .premium-badge {
    @apply bg-gradient-to-r from-yellow-400 to-amber-600;
  }
  
  .profile-card {
    @apply relative bg-white rounded-2xl overflow-hidden shadow-lg transition-all duration-300;
    height: calc(70vh);
  }
  
  .profile-actions {
    @apply flex items-center justify-center space-x-4 mt-4;
  }
  
  .action-button {
    @apply flex items-center justify-center rounded-full shadow-md transition-all duration-300 hover:scale-110;
  }
  
  .typing-indicator {
    @apply flex space-x-1 px-2 py-1 bg-gray-100 rounded-full inline-flex items-center;
  }
  
  .typing-indicator-dot {
    @apply h-1.5 w-1.5 rounded-full bg-gray-400;
    animation: typingAnimation 1.4s infinite ease-in-out;
  }
  
  .typing-indicator-dot:nth-child(1) {
    animation-delay: 0s;
  }
  
  .typing-indicator-dot:nth-child(2) {
    animation-delay: 0.2s;
  }
  
  .typing-indicator-dot:nth-child(3) {
    animation-delay: 0.4s;
  }
  
  @keyframes typingAnimation {
    0%, 60%, 100% {
      transform: translateY(0);
    }
    30% {
      transform: translateY(-4px);
    }
  }
}

/* Typing indicator animation */
.typing-indicator {
  display: flex;
  align-items: center;
  gap: 2px;
  background: white;
  padding: 8px 16px;
  border-radius: 20px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.typing-indicator-dot {
  width: 8px;
  height: 8px;
  background: #a3a3a3;
  border-radius: 50%;
  animation: typing-bounce 1.4s infinite ease-in-out;
}

.typing-indicator-dot:nth-child(1) {
  animation-delay: -0.32s;
}

.typing-indicator-dot:nth-child(2) {
  animation-delay: -0.16s;
}

@keyframes typing-bounce {
  0%, 80%, 100% {
    transform: scale(0.6);
  }
  40% {
    transform: scale(1);
  }
}

/* Dating app specific gradients and animations */
.dating-gradient {
  background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
}

@keyframes pulse-heart {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.1);
  }
  100% {
    transform: scale(1);
  }
}

.animate-pulse-heart {
  animation: pulse-heart 1.5s infinite ease-in-out;
}

@keyframes swipe-left {
  to {
    transform: translateX(-150%) rotate(-20deg);
    opacity: 0;
  }
}

@keyframes swipe-right {
  to {
    transform: translateX(150%) rotate(20deg);
    opacity: 0;
  }
}

.animate-swipe-left {
  animation: swipe-left 0.5s ease-out forwards;
}

.animate-swipe-right {
  animation: swipe-right 0.5s ease-out forwards;
}

@keyframes match-popup {
  0% {
    transform: scale(0.8);
    opacity: 0;
  }
  100% {
    transform: scale(1);
    opacity: 1;
  }
}

.animate-match-popup {
  animation: match-popup 0.3s ease-out forwards;
}

================
File: /Users/jess/Desktop/dating-app/app/layout.tsx
================
import type { Metadata } from 'next'
import MiniKitProvider from '@/components/minikit-provider'
import { VerificationProvider } from '@/contexts/verification-context'
import { Toaster } from "@/components/ui/toaster"
import "./globals.css"

export const metadata: Metadata = {
  title: 'Dating App',
  description: 'Find your perfect match',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <MiniKitProvider>
        <VerificationProvider>
          <body>
            <div className="flex flex-col h-screen max-w-md mx-auto bg-gray-50">
              <main className="flex-1 overflow-y-auto pb-16">
                {children}
              </main>
            </div>
            <Toaster />
          </body>
        </VerificationProvider>
      </MiniKitProvider>
    </html>
  )
}

================
File: /Users/jess/Desktop/dating-app/app/page.tsx
================
'use client'

import Link from "next/link"
import { Heart, MessageCircle, User } from "lucide-react"
import { useState } from "react"

import { Button } from "@/components/ui/button"
import { SwipePage } from "@/app/swipe/page"
import { 
  sendPayment, 
  verifyUser, 
  getAppId, 
  sendHapticFeedback, 
  sendStrongHapticFeedback, 
  sendSuccessNotification 
} from "@/lib/worldcoin"
import VerifyHumanity from "@/components/VerifyHumanity"
import { useVerification } from '@/contexts/verification-context'
import { NavigationLayout } from '@/components/NavigationLayout'

export default function Home() {
  const { isVerified, setVerified } = useVerification()
  const [appId, setAppId] = useState<string | null>(null);
  const [isPaid, setIsPaid] = useState(false);

  const handlePayment = async () => {
    const success = await sendPayment();
    if (success) {
      setIsPaid(true);
      sendHapticFeedback();
    }
  }

  const handleGetAppId = () => {
    const id = getAppId();
    setAppId(id);
  };

  const handleVerificationSuccess = () => {
    setVerified(true);
    sendHapticFeedback();
    console.log('Verification successful');
  };

  const handleUnverify = () => {
    setVerified(false);
    sendStrongHapticFeedback();
    console.log('User unverified');
  };


  const handleVerificationError = (error: string) => {
    // Handle verification error
    sendStrongHapticFeedback();
    console.error('Verification failed:', error);
  };

  // Only render the main content if verified
  // const renderContent = () => (
  //   <>
  //     <header className="sticky top-0 z-10 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
  //       <div className="container flex h-14 items-center">
  //         <div className="mr-4 flex">
  //           <Link href="/" className="flex items-center space-x-2">
  //             <Heart className="h-6 w-6 text-pink-500" />
  //             <span className="font-bold text-xl">MiniAmor</span>
  //           </Link>
  //         </div>
  //         <div className="flex flex-1 items-center justify-end space-x-2">
  //           <nav className="flex items-center space-x-2">
  //             <Link href="/matches">
  //               <Button variant="ghost" size="icon">
  //                 <Heart className="h-5 w-5 text-pink-500" />
  //               </Button>
  //             </Link>
  //             <Link href="/messages">
  //               <Button variant="ghost" size="icon">
  //                 <MessageCircle className="h-5 w-5" />
  //               </Button>
  //             </Link>
  //             <Link href="/profile">
  //               <Button variant="ghost" size="icon">
  //                 <User className="h-5 w-5" />
  //               </Button>
  //             </Link>
  //           </nav>
  //         </div>
  //       </div>
  //     </header>
  //     <main className="flex-1">
  //       <section className="container py-10 md:py-12 lg:py-16">
  //         <div className="mx-auto max-w-md">
  //           <ProfileCard profile={profiles[0]} />
  //           <div className="space-y-2">
  //             {/* <Button onClick={() => { if (!isVerified) handleVerify(); }}>
  //               {isVerified ? "Verified" : "Verify"}
  //             </Button> */}
  //             <Button onClick={handleUnverify} className="w-full">
  //               Unverify
  //             </Button>
  //             <Button onClick={handleGetAppId} className="w-full">
  //               Get App ID
  //             </Button>
  //             <Button onClick={handlePayment} className="w-full">
  //               Send Payment
  //             </Button>
  //             {appId && (
  //               <div className="mt-2 p-2 bg-gray-100 rounded">
  //                 <p className="text-sm">App ID: {appId}</p>
  //               </div>
  //             )}
  //           </div>
  //         </div>
  //       </section>
  //     </main>
  //   </>
  // );

  // const renderContent = () => (
  //   <>
  //     {/* <SwipePage /> */}
  //     {/* <Button onClick={handleUnverify} className="w-full">
  //       Unverify
  //     </Button> */}
  //     <BottomNav />
  //   </>
  // )

  return (
    <NavigationLayout>
      <div className="flex min-h-screen flex-col">
        {!isVerified ? (
          <VerifyHumanity 
            onVerificationSuccess={handleVerificationSuccess}
            onVerificationError={handleVerificationError}
          />
        ) : (
          <SwipePage />
        )}
      </div>
    </NavigationLayout>
  );
}

================
File: /Users/jess/Desktop/dating-app/components/BottomNav.tsx
================
"use client";

import { Heart, MessageCircle, User, Settings, Crown } from "lucide-react";
import { usePathname, useRouter } from "next/navigation";
import { cn } from "@/lib/utils";
import { useEffect } from "react";

const navItems = [
  { path: "/swipe", icon: Heart, label: "Discover" },
  { path: "/matches", icon: MessageCircle, label: "Matches" },
//   { path: "/profile", icon: User, label: "Profile" },
  { path: "/purchased-features", icon: Crown, label: "Premium" },
//   { path: "/settings", icon: Settings, label: "Settings" },
  { path: "/profile", icon: User, label: "Profile" },
];

export function BottomNav() {
  const pathname = usePathname();
  const router = useRouter();

  //   useEffect(() => {
  //     // Redirect to /swipe by default if no path is matched
  //     if (!navItems.some(item => item.path === pathname)) {
  //       router.push('/swipe')
  //     }
  //   }, [pathname, router])

  return (
    <nav className="fixed bottom-0 left-0 right-0 z-50 bg-white border-t border-gray-200 px-2 py-3 max-w-md mx-auto">
      <div className="flex items-center justify-around">
        {navItems.map((item) => (
          <button
            key={item.path}
            onClick={() => router.push(item.path)}
            className={cn(
              "flex flex-col items-center justify-center p-2 rounded-lg transition-colors",
              pathname === item.path
                ? "text-dating-purple"
                : "text-gray-500 hover:text-gray-900"
            )}
          >
            <item.icon size={24} />
            <span className="text-xs mt-1">{item.label}</span>
          </button>
        ))}
      </div>
    </nav>
  );
}

================
File: /Users/jess/Desktop/dating-app/components/MainPage.tsx
================
'use client'

import { useEffect } from 'react'
import { useRouter, usePathname } from 'next/navigation'
import { BottomNav } from './BottomNav'

interface MainPageProps {
  children: React.ReactNode
  isVerified: boolean
}

const PROTECTED_ROUTES = ['/swipe', '/matches', '/profile', '/settings']

export function MainPage({ children, isVerified }: MainPageProps) {
  const router = useRouter()
  const pathname = usePathname()

  useEffect(() => {
    // If not verified and trying to access protected routes, redirect to verification
    if (!isVerified && PROTECTED_ROUTES.includes(pathname)) {
      router.push('/verify')
      return
    }

    // If verified but on the verify page, redirect to swipe
    if (isVerified && pathname === '/verify') {
      router.push('/swipe')
      return
    }
  }, [isVerified, pathname, router])

  // Don't show bottom nav on verification page
  const showBottomNav = isVerified && pathname !== '/verify'

  return (
    <div className="min-h-screen bg-background pb-16">
      {children}
      {showBottomNav && <BottomNav />}
    </div>
  )
}

================
File: /Users/jess/Desktop/dating-app/components/minikit-provider.tsx
================
'use client' // Required for Next.js

import { ReactNode, useEffect } from 'react'
import { MiniKit } from '@worldcoin/minikit-js'

export default function MiniKitProvider({ children }: { children: ReactNode }) {
	useEffect(() => {
		// Passing appId in the install is optional
		// but allows you to access it later via `window.MiniKit.appId`
		MiniKit.install('app_7d9479b0459e77d4fad4d5cf5ddb7cc3');
	}, [])

	return <>{children}</>
}

================
File: /Users/jess/Desktop/dating-app/components/NavigationLayout.tsx
================
'use client'

import { useVerification } from '@/contexts/verification-context'
import { BottomNav } from './BottomNav'

export function NavigationLayout({ children }: { children: React.ReactNode }) {
  const { isVerified } = useVerification()

  return (
    <div className="relative flex flex-col min-h-screen max-w-md mx-auto bg-white">
      <div className="flex-1">
        {children}
      </div>
      {isVerified && <BottomNav />}
    </div>
  )
}

================
File: /Users/jess/Desktop/dating-app/components/profile-card.tsx
================
"use client"

import { useState } from "react"
import Image from "next/image"
import { Heart, X } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import type { Profile } from "@/lib/types"

interface ProfileCardProps {
  profile: Profile
}

export default function ProfileCard({ profile }: ProfileCardProps) {
  const [direction, setDirection] = useState<"left" | "right" | null>(null)
  const [status, setStatus] = useState<"visible" | "swiped">("visible")

  const handleSwipe = (dir: "left" | "right") => {
    setDirection(dir)
    setStatus("swiped")

    // Reset after animation completes
    setTimeout(() => {
      setDirection(null)
      setStatus("visible")
    }, 300)
  }

  return (
    <div className="relative">
      <Card
        className={cn(
          "overflow-hidden transition-all duration-300 transform",
          direction === "left" && "translate-x-[-200px] rotate-[-20deg] opacity-0",
          direction === "right" && "translate-x-[200px] rotate-[20deg] opacity-0",
        )}
      >
        <div className="relative h-[500px] w-full">
          <Image src={profile.image || "/placeholder.svg"} alt={profile.name} fill className="object-cover" priority />
        </div>
        <CardContent className="p-6">
          <div className="space-y-1">
            <div className="flex items-center justify-between">
              <h3 className="text-2xl font-semibold">
                {profile.name}, {profile.age}
              </h3>
              <div className="flex items-center space-x-1">
                <span className="h-2 w-2 rounded-full bg-green-500"></span>
                <span className="text-sm text-muted-foreground">Online</span>
              </div>
            </div>
            <p className="text-muted-foreground">{profile.location}</p>
          </div>
          <div className="mt-4">
            <p>{profile.bio}</p>
          </div>
          <div className="mt-4 flex flex-wrap gap-2">
            {profile.interests.map((interest, index) => (
              <span key={index} className="rounded-full bg-pink-100 px-3 py-1 text-sm text-pink-800">
                {interest}
              </span>
            ))}
          </div>
        </CardContent>
      </Card>

      <div className="absolute bottom-4 left-0 right-0 flex justify-center space-x-4">
        <Button
          size="lg"
          variant="outline"
          className="h-14 w-14 rounded-full bg-white shadow-lg"
          onClick={() => handleSwipe("left")}
        >
          <X className="h-6 w-6 text-red-500" />
        </Button>
        <Button
          size="lg"
          variant="outline"
          className="h-14 w-14 rounded-full bg-white shadow-lg"
          onClick={() => handleSwipe("right")}
        >
          <Heart className="h-6 w-6 text-pink-500" />
        </Button>
      </div>
    </div>
  )
}

================
File: /Users/jess/Desktop/dating-app/components/StickerPicker.tsx
================
import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { payWithWorldcoin } from '@/lib/worldcoin';

interface Sticker {
  id: string;
  name: string;
  image: string;
  price?: number;
  isPremium: boolean;
}

const stickers: Sticker[] = [
  { id: 'heart', name: 'Heart', image: '❤️', isPremium: false },
  { id: 'smile', name: 'Smile', image: '😊', isPremium: false },
  { id: 'rose', name: 'Rose', image: '🌹', price: 1, isPremium: true },
  { id: 'kiss', name: 'Kiss', image: '💋', price: 2, isPremium: true },
  { id: 'ring', name: 'Ring', image: '💍', price: 4, isPremium: true },
//   { id: 'chocolate', name: 'Chocolate', image: '🍫', price: 1, isPremium: true },
  { id: 'star', name: 'Star', image: '⭐', price: 2, isPremium: true },
  { id: 'gift', name: 'Gift', image: '🎁', price: 3, isPremium: true },
];

interface StickerPickerProps {
  onSelect: (sticker: Sticker) => void;
}

const StickerPicker: React.FC<StickerPickerProps> = ({ onSelect }) => {
  const [selectedSticker, setSelectedSticker] = useState<Sticker | null>(null);
  const [showPaymentDialog, setShowPaymentDialog] = useState(false);

  const handleStickerClick = (sticker: Sticker) => {
    if (sticker.isPremium) {
      setSelectedSticker(sticker);
      setShowPaymentDialog(true);
    } else {
      onSelect(sticker);
    }
  };

  const handlePurchase = () => {
    if (selectedSticker) {
      onSelect(selectedSticker);
      setShowPaymentDialog(false);
      setSelectedSticker(null);
    }
  };

  return (
    <div className="p-4">
      <div className="grid grid-cols-4 gap-4">
        {stickers.map((sticker) => (
          <Card
            key={sticker.id}
            className={`p-4 flex flex-col items-center justify-center cursor-pointer hover:bg-gray-50 transition-colors ${
              sticker.isPremium ? 'border-dating-purple' : ''
            }`}
            onClick={() => handleStickerClick(sticker)}
          >
            <span className="text-4xl mb-2">{sticker.image}</span>
            <span className="text-sm">{sticker.name}</span>
            {sticker.isPremium && (
              <span className="text-xs text-dating-purple mt-1">${sticker.price}</span>
            )}
          </Card>
        ))}
      </div>

      <Dialog open={showPaymentDialog} onOpenChange={setShowPaymentDialog}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Purchase Sticker</DialogTitle>
          </DialogHeader>
          <div className="flex flex-col items-center py-4">
            <span className="text-6xl mb-4">{selectedSticker?.image}</span>
            <p className="text-lg font-semibold">{selectedSticker?.name}</p>
            <p className="text-2xl font-bold text-dating-purple mt-2">
              WLD {selectedSticker?.price}
            </p>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setShowPaymentDialog(false)}
            >
              Cancel
            </Button>
            <Button
              className="mb-1 text bg-gradient-to-r from-dating-purple to-dating-pink"
              onClick={() => {
                const price = selectedSticker?.price;
                const name = selectedSticker?.name;

                if (price !== undefined && name) {
                  payWithWorldcoin(price, name);
                } else {
                  console.error("Selected sticker price or name is undefined.");
                }
              }}
            >
              Purchase & Send
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default StickerPicker;

================
File: /Users/jess/Desktop/dating-app/components/SwipePage.tsx
================
import React, { useState, useRef, useEffect, TouchEvent } from "react";
import { ChevronDown, X, Heart, Star, Undo } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { mockProfiles, Profile } from "@/data/mockData";
import { useToast } from "@/components/ui/use-toast";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { useIsMobile } from "@/hooks/use-mobile";

export const SwipePage: React.FC = () => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [showMatch, setShowMatch] = useState(false);
  const [matchedProfile, setMatchedProfile] = useState<Profile | null>(null);
  const [direction, setDirection] = useState<"left" | "right" | null>(null);
  const cardRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();
  const isMobile = useIsMobile();

  // Touch gesture states
  const [touchStart, setTouchStart] = useState({ x: 0, y: 0 });
  const [touchEnd, setTouchEnd] = useState({ x: 0, y: 0 });
  const [isSwiping, setIsSwiping] = useState(false);
  const [swipeOffset, setSwipeOffset] = useState(0);

  // Add new state for mouse tracking
  const [isMouseDown, setIsMouseDown] = useState(false);
  const [mouseStart, setMouseStart] = useState({ x: 0, y: 0 });

  const currentProfile = mockProfiles[currentIndex];

  const handleSwipe = (liked: boolean) => {
    setDirection(liked ? "right" : "left");
    
    // Simulate 30% chance of match if liked
    const isMatch = liked && Math.random() < 0.3;
    
    setTimeout(() => {
      if (isMatch) {
        setMatchedProfile(currentProfile);
        setShowMatch(true);
      }
      
      // Move to next profile
      setDirection(null);
      if (currentIndex < mockProfiles.length - 1) {
        setCurrentIndex(currentIndex + 1);
      } else {
        // Reset to first profile for demo purposes
        setCurrentIndex(0);
      }
    }, 500);
  };

  const handleSuperLike = () => {
    toast({
      title: "Super Like Used!",
      description: "This is a premium feature. You've used 1 of your 5 daily Super Likes.",
      duration: 3000,
    });
    
    // Higher chance of match with super like
    const isMatch = Math.random() < 0.6;
    
    if (isMatch) {
      setMatchedProfile(currentProfile);
      setShowMatch(true);
    }
    
    if (currentIndex < mockProfiles.length - 1) {
      setCurrentIndex(currentIndex + 1);
    } else {
      setCurrentIndex(0);
    }
  };

  const handleRewind = () => {
    toast({
      title: "Premium Feature",
      description: "Upgrade to Premium to unlock Rewind and go back to the previous profile.",
      duration: 3000,
    });
  };

  // Handle touch start
  const handleTouchStart = (e: TouchEvent) => {
    setTouchStart({
      x: e.touches[0].clientX,
      y: e.touches[0].clientY
    });
    setIsSwiping(true);
  };

  // Handle touch move
  const handleTouchMove = (e: TouchEvent) => {
    if (!isSwiping) return;
    
    const currentX = e.touches[0].clientX;
    const diff = currentX - touchStart.x;
    
    // Limit the drag distance
    const maxOffset = window.innerWidth * 0.4;
    const limitedOffset = Math.max(Math.min(diff, maxOffset), -maxOffset);
    
    setSwipeOffset(limitedOffset);
    setTouchEnd({
      x: currentX,
      y: e.touches[0].clientY
    });
  };

  // Handle touch end
  const handleTouchEnd = () => {
    if (!isSwiping) return;
    
    setIsSwiping(false);
    const diffX = touchEnd.x - touchStart.x;
    const threshold = window.innerWidth * 0.15; // 15% of screen width
    
    // Reset swipe offset
    setSwipeOffset(0);
    
    // Determine if swipe was significant enough
    if (Math.abs(diffX) > threshold) {
      if (diffX > 0) {
        // Swipe right (like)
        handleSwipe(true);
      } else {
        // Swipe left (dislike)
        handleSwipe(false);
      }
    }
  };

  // Handle mouse down
  const handleMouseDown = (e: React.MouseEvent) => {
    setIsMouseDown(true);
    setIsSwiping(true);
    setMouseStart({
      x: e.clientX,
      y: e.clientY
    });
    setTouchStart({
      x: e.clientX,
      y: e.clientY
    });
  };

  // Handle mouse move
  const handleMouseMove = (e: React.MouseEvent) => {
    if (!isMouseDown) return;
    
    const currentX = e.clientX;
    const diff = currentX - mouseStart.x;
    
    // Limit the drag distance
    const maxOffset = window.innerWidth * 0.4;
    const limitedOffset = Math.max(Math.min(diff, maxOffset), -maxOffset);
    
    setSwipeOffset(limitedOffset);
    setTouchEnd({
      x: currentX,
      y: e.clientY
    });
  };

  // Handle mouse up
  const handleMouseUp = () => {
    if (!isMouseDown) return;
    
    setIsMouseDown(false);
    setIsSwiping(false);
    const diffX = touchEnd.x - touchStart.x;
    const threshold = window.innerWidth * 0.15; // 15% of screen width
    
    // Reset swipe offset
    setSwipeOffset(0);
    
    // Determine if swipe was significant enough
    if (Math.abs(diffX) > threshold) {
      if (diffX > 0) {
        handleSwipe(true);
      } else {
        handleSwipe(false);
      }
    }
  };

  // Add useEffect to handle mouse up outside the card
  useEffect(() => {
    const handleGlobalMouseUp = () => {
      if (isMouseDown) {
        handleMouseUp();
      }
    };

    window.addEventListener('mouseup', handleGlobalMouseUp);
    return () => {
      window.removeEventListener('mouseup', handleGlobalMouseUp);
    };
  }, [isMouseDown, touchEnd.x, touchStart.x]);

  return (
    <div className="relative h-full pt-4 px-4 pb-20">
      <header className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold bg-clip-text text-transparent dating-gradient">
          Discover
        </h1>
        <Button 
          variant="ghost" 
          size="sm" 
          className="text-gray-500"
          onClick={() => toast({
            title: "Filters",
            description: "Filter functionality will be available in the next version!",
          })}
        >
          Filters <ChevronDown className="ml-1 h-4 w-4" />
        </Button>
      </header>

      {/* Profile Card with Scrollable Content */}
      <div 
        ref={cardRef}
        className={`profile-card overflow-hidden ${
          direction === "left" 
            ? "animate-swipe-left" 
            : direction === "right" 
            ? "animate-swipe-right" 
            : ""
        }`}
        style={{
          transform: isSwiping ? `translateX(${swipeOffset}px) rotate(${swipeOffset * 0.03}deg)` : '',
          transition: isSwiping ? 'none' : 'transform 0.3s ease',
          cursor: isMouseDown ? 'grabbing' : 'grab'
        }}
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={handleTouchEnd}
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
      >
        <div className="h-full overflow-y-auto">
          {/* Profile Image Section */}
          <div 
            className="relative h-[60vh] min-h-[400px]"
            style={{
              backgroundImage: `url(${currentProfile.photos[0]})`,
              backgroundSize: 'cover',
              backgroundPosition: 'center',
            }}
          >
            {/* Gradient overlay for text readability */}
            <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent" />

            {/* Basic Profile Info */}
            <div className="absolute bottom-0 left-0 right-0 p-4 text-white">
              <div>
                <h2 className="text-3xl font-bold">{currentProfile.name}, {currentProfile.age}</h2>
                <p className="text-sm opacity-90">{currentProfile.location} • {currentProfile.distance} miles away</p>
              </div>
            </div>
          </div>

          {/* Scrollable Profile Details Section */}
          <div className="bg-white p-4">
            <p className="text-gray-800 text-lg mb-4">{currentProfile.bio}</p>
            
            <div className="flex flex-wrap gap-2 my-4">
              {currentProfile.interests.map((interest, index) => (
                <Badge key={index} variant="secondary" className="bg-gray-100 text-gray-800">
                  {interest}
                </Badge>
              ))}
            </div>

            <div className="space-y-4">
              {currentProfile.prompts.map((prompt, index) => (
                <div key={index} className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-sm font-bold text-gray-700">{prompt.question}</p>
                  <p className="text-gray-600 mt-2">{prompt.answer}</p>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Swipe Instruction (only shown on mobile) */}
      {isMobile && (
        <div className="text-center text-sm text-gray-500 mt-4 animate-pulse">
          Swipe right to like, left to pass
        </div>
      )}

      {/* Action Buttons */}
      {/* <div className="profile-actions">
        <button
          className="action-button w-14 h-14 bg-white text-dating-red border-2 border-dating-red"
          onClick={() => handleSwipe(false)}
        >
          <X className="h-8 w-8 text-dating-red" />
        </button>
        <button
          className="action-button w-12 h-12 bg-white text-yellow-500 border-2 border-yellow-500"
          onClick={handleRewind}
        >
          <Undo className="h-6 w-6 text-yellow-500" />
        </button>
        <button
          className="action-button w-12 h-12 bg-white text-blue-500 border-2 border-blue-500"
          onClick={handleSuperLike}
        >
          <Star className="h-6 w-6 text-blue-500" />
        </button>
        <button
          className="action-button w-14 h-14 bg-white text-dating-green border-2 border-dating-green"
          onClick={() => handleSwipe(true)}
        >
          <Heart className="h-8 w-8 text-dating-green" />
        </button>
      </div> */}

      {/* Match Dialog */}
      <Dialog open={showMatch} onOpenChange={setShowMatch}>
        <DialogContent className="bg-gradient-to-br from-dating-purple to-dating-pink text-white border-0 max-w-md rounded-xl animate-match-popup">
          <DialogHeader className="text-center pt-6">
            <div className="flex justify-center">
              <Heart className="h-20 w-20 animate-pulse-heart text-white" />
            </div>
            <DialogTitle className="text-3xl font-bold mt-4">It's a Match!</DialogTitle>
            <DialogDescription className="text-white/90 text-lg">
              You and {matchedProfile?.name} liked each other
            </DialogDescription>
          </DialogHeader>
          
          <div className="flex justify-center space-x-4 my-6">
            <div className="h-24 w-24 rounded-full border-4 border-white overflow-hidden">
              <img 
                src="https://source.unsplash.com/random/300×300/?portrait" 
                alt="Your profile" 
                className="h-full w-full object-cover"
              />
            </div>
            <div className="h-24 w-24 rounded-full border-4 border-white overflow-hidden">
              <img 
                src={matchedProfile?.photos[0]} 
                alt={matchedProfile?.name} 
                className="h-full w-full object-cover"
              />
            </div>
          </div>
          
          <div className="flex space-x-3 mt-2">
            <Button 
              className="flex-1 bg-white hover:bg-gray-100 text-dating-purple"
              onClick={() => setShowMatch(false)}
            >
              Keep Swiping
            </Button>
            <Button 
              className="flex-1 bg-white hover:bg-gray-100 text-dating-purple"
              onClick={() => {
                setShowMatch(false);
                // Would navigate to chat in a full implementation
              }}
            >
              Send Message
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default SwipePage;

================
File: /Users/jess/Desktop/dating-app/components/theme-provider.tsx
================
'use client'

import * as React from 'react'
import {
  ThemeProvider as NextThemesProvider,
  type ThemeProviderProps,
} from 'next-themes'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

================
File: /Users/jess/Desktop/dating-app/components/VerifyHumanity.tsx
================
import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { verifyUser } from '@/lib/worldcoin';
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Shield, CheckCircle2, XCircle, Heart, UserCheck, Users } from "lucide-react";

// Constants for customization and reusability
const APP_NAME = 'MINI AMOR';
const TAGLINE = 'Dating, Reimagined.';
const DESCRIPTION = 'Authentic connections between real humans';
const VALUE_PROPS = [
  {
    icon: UserCheck,
    title: 'Human Verification',
    description: 'Every profile verified through World ID'
  },
  {
    icon: Users,
    title: 'Zero Fake Profiles',
    description: 'No bots, no catfish, no exceptions'
  },
  {
    icon: Heart,
    title: 'Meaningful Matches',
    description: 'Quality connections with real people'
  }
];
const BUTTON_TEXT = 'Verify with World ID';
const ERROR_MESSAGE = 'Verification failed. Please try again.';
const LOADING_TEXT = 'Verifying...';
const SUCCESS_MESSAGE = 'Success! Welcome to MINI AMOR';

interface VerifyHumanityProps {
  onVerificationSuccess?: () => void;
  onVerificationError?: (error: string) => void;
}

/**
 * VerifyHumanity Component
 * 
 * A modern, visually impactful verification screen using World ID
 * with optimized layout - verification card after taglines and compact feature props
 * 
 * @param onVerificationSuccess - Optional callback for successful verification
 * @param onVerificationError - Optional callback for verification errors
 */
export const VerifyHumanity: React.FC<VerifyHumanityProps> = ({
  onVerificationSuccess,
  onVerificationError
}) => {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isSuccess, setIsSuccess] = useState(false);

  const handleVerification = async () => {
    setIsLoading(true);
    setError(null);

    try {
      const result = await verifyUser();
      
      if (result.isSuccess) {
        setIsSuccess(true);
        onVerificationSuccess?.();
        setTimeout(() => {
          router.push('/');
        }, 1500);
      } else {
        const errorMessage = result.error || ERROR_MESSAGE;
        setError(errorMessage);
        onVerificationError?.(errorMessage);
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : ERROR_MESSAGE;
      setError(errorMessage);
      onVerificationError?.(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-dating-purple/5 via-background to-dating-pink/5 flex flex-col items-center justify-center p-4">
      {/* Hero Section with Glass Effect */}
      <div className="w-full max-w-5xl text-center relative">
        <div className="absolute inset-0 bg-gradient-to-r from-dating-purple/10 to-dating-pink/10 rounded-3xl blur-3xl -z-10" />
        
        <div className="flex items-center justify-center gap-3 mb-6">
          <div className="relative">
            <div className="absolute inset-0 bg-gradient-to-br from-dating-purple to-dating-pink rounded-full blur-lg opacity-50" />
            <Shield className="h-12 w-12 text-white relative" />
          </div>
          <h1 className="text-4xl font-bold bg-gradient-to-r from-dating-purple to-dating-pink text-transparent bg-clip-text">
            {APP_NAME}
          </h1>
        </div>
        
        <h2 className="text-3xl font-semibold mb-4 tracking-tight">{TAGLINE}</h2>
        <p className="text-lg text-muted-foreground mb-8 max-w-2xl mx-auto">{DESCRIPTION}</p>
        
        {/* Verification Card - Moved Up After Taglines */}
        <Card className="max-w-md mx-auto bg-background/80 backdrop-blur-lg border border-dating-purple/20 overflow-hidden mb-8">
          <div className="h-2 bg-gradient-to-r from-dating-purple to-dating-pink" />
          <CardContent className="pt-8 pb-8 space-y-6">
            {error && (
              <div className="flex items-center space-x-3 text-red-500 bg-red-50 p-4 rounded-xl">
                <XCircle className="h-6 w-6 flex-shrink-0" />
                <p>{error}</p>
              </div>
            )}

            {isSuccess && (
              <div className="flex items-center space-x-3 text-green-500 bg-green-50 p-4 rounded-xl">
                <CheckCircle2 className="h-6 w-6 flex-shrink-0" />
                <p>{SUCCESS_MESSAGE}</p>
              </div>
            )}

            <div className="space-y-3">
              <p className="text-center text-muted-foreground text-sm">
                Verify your identity once, connect authentically forever
              </p>
              <Button
                onClick={handleVerification}
                disabled={isLoading || isSuccess}
                className="w-full bg-gradient-to-r from-dating-purple to-dating-pink hover:opacity-90 transition-all duration-300 h-14 text-base font-medium rounded-xl shadow-lg shadow-dating-purple/20"
              >
                {isLoading ? (
                  <span className="flex items-center gap-2">
                    <span className="h-4 w-4 rounded-full border-2 border-white/30 border-t-white animate-spin" />
                    {LOADING_TEXT}
                  </span>
                ) : (
                  <span className="flex items-center justify-center gap-2">
                    <Shield className="h-5 w-5" />
                    {BUTTON_TEXT}
                  </span>
                )}
              </Button>
            </div>
          </CardContent>
        </Card>
        
        {/* Value Props - Made Smaller */}
        <div className="grid md:grid-cols-3 gap-4 mb-8">
          {VALUE_PROPS.map((prop, index) => (
            <Card key={index} className="bg-background/40 backdrop-blur-md border border-dating-purple/20 hover:border-dating-purple/40 transition-all duration-300">
              <CardContent className="pt-4 pb-4 px-4 text-center">
                <div className="mb-3 flex justify-center">
                  <div className="p-2 rounded-full bg-gradient-to-br from-dating-purple/10 to-dating-pink/10">
                    <prop.icon className="h-5 w-5 text-dating-purple" />
                  </div>
                </div>
                <h3 className="text-base font-medium mb-1">{prop.title}</h3>
                <p className="text-xs text-muted-foreground">{prop.description}</p>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Subtle Testimonial */}
        <div className="mt-6 text-center max-w-lg mx-auto">
          <p className="text-xs italic text-muted-foreground">
            "MINI AMOR has completely changed the way I approach online dating. 
            No more wasted time on fake profiles — just real connections."
          </p>
          <p className="text-xs mt-1 font-medium">— Our *Only* User, Emily</p>
        </div>
      </div>
    </div>
  );
};

export default VerifyHumanity;

================
File: /Users/jess/Desktop/dating-app/lib/data.ts
================
import type { Match, Message, Profile, UserProfile } from "./types"

export const profiles: Profile[] = [
  {
    id: "profile1",
    name: "Emma",
    age: 28,
    location: "New York, NY",
    bio: "Coffee enthusiast, book lover, and hiking addict. Looking for someone to share adventures with!",
    interests: ["Travel", "Reading", "Hiking", "Coffee", "Photography"],
    image: "/placeholder.svg?height=500&width=400",
  },
  {
    id: "profile2",
    name: "James",
    age: 31,
    location: "Brooklyn, NY",
    bio: "Musician and foodie. I spend my weekends exploring new restaurants and playing at local venues.",
    interests: ["Music", "Food", "Concerts", "Cooking", "Art"],
    image: "/placeholder.svg?height=500&width=400",
  },
  {
    id: "profile3",
    name: "Sophia",
    age: 26,
    location: "Manhattan, NY",
    bio: "Yoga instructor by day, wine enthusiast by night. Looking for someone to balance my chakras.",
    interests: ["Yoga", "Wine", "Meditation", "Travel", "Fitness"],
    image: "/placeholder.svg?height=500&width=400",
  },
]

export const matches: Match[] = [
  {
    id: "match1",
    name: "Olivia",
    age: 27,
    location: "Manhattan, NY",
    bio: "Art curator with a passion for 90s music and vintage fashion.",
    interests: ["Art", "Music", "Fashion", "Museums", "Concerts"],
    image: "/placeholder.svg?height=200&width=200",
    matchDate: "Matched 2 days ago",
    lastMessage: "Would you like to grab coffee sometime this week?",
    lastMessageTime: "2h ago",
    online: true,
  },
  {
    id: "match2",
    name: "Ethan",
    age: 30,
    location: "Brooklyn, NY",
    bio: "Software engineer who loves rock climbing and craft beer.",
    interests: ["Climbing", "Coding", "Beer", "Hiking", "Travel"],
    image: "/placeholder.svg?height=200&width=200",
    matchDate: "Matched 5 days ago",
    lastMessage: "That climbing gym looks amazing! When are you free?",
    lastMessageTime: "1d ago",
    online: false,
  },
  {
    id: "match3",
    name: "Ava",
    age: 25,
    location: "Queens, NY",
    bio: "Pastry chef and dog lover. Will bake for dates.",
    interests: ["Baking", "Dogs", "Food", "Movies", "Parks"],
    image: "/placeholder.svg?height=200&width=200",
    matchDate: "Matched yesterday",
    lastMessage: "My dog already likes you based on your profile!",
    lastMessageTime: "5h ago",
    online: true,
  },
  {
    id: "match4",
    name: "Noah",
    age: 29,
    location: "Bronx, NY",
    bio: "Teacher by day, amateur comedian by night.",
    interests: ["Comedy", "Education", "Books", "Stand-up", "Writing"],
    image: "/placeholder.svg?height=200&width=200",
    matchDate: "Matched 1 week ago",
    lastMessage: "You should come to my show on Friday!",
    lastMessageTime: "3d ago",
    online: false,
  },
]

export const userProfile: UserProfile = {
  id: "user",
  name: "Alex Johnson",
  age: 28,
  location: "New York, NY",
  bio: "Tech enthusiast and avid traveler. Always planning my next adventure!",
  interests: ["Travel", "Technology", "Photography", "Fitness", "Cooking"],
  interestsRaw: "Travel, Technology, Photography, Fitness, Cooking",
  image: "/placeholder.svg?height=300&width=300",
}

export const messages: Message[] = [
  {
    id: "msg1",
    senderId: "match1",
    text: "Hey there! I noticed we both love art museums. Have you been to the MoMA recently?",
    timestamp: "2023-04-05T14:30:00Z",
  },
  {
    id: "msg2",
    senderId: "user",
    text: "Hi! Yes, I was there last month for the new exhibition. It was amazing!",
    timestamp: "2023-04-05T14:35:00Z",
  },
  {
    id: "msg3",
    senderId: "match1",
    text: "That's awesome! I haven't seen it yet. Would you like to grab coffee sometime this week and tell me about it?",
    timestamp: "2023-04-05T14:40:00Z",
  },
]

export function getMatchById(id: string): Match | undefined {
  return matches.find((match) => match.id === id)
}

================
File: /Users/jess/Desktop/dating-app/lib/types.ts
================
export interface Profile {
  id: string
  name: string
  age: number
  location: string
  bio: string
  interests: string[]
  image: string
}

export interface Match extends Profile {
  matchDate: string
  lastMessage: string
  lastMessageTime: string
  online: boolean
}

export interface UserProfile extends Profile {
  interestsRaw: string
}

export interface Message {
  id: string
  senderId: string
  text: string
  timestamp: string
}

================
File: /Users/jess/Desktop/dating-app/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: /Users/jess/Desktop/dating-app/lib/worldcoin.ts
================
import { MiniKit, VerifyCommandInput, VerificationLevel, ISuccessResult, tokenToDecimals, Tokens, PayCommandInput, SignMessageInput } from '@worldcoin/minikit-js'
// import Safe from '@safe-global/safe-core-sdk'
// Constants
const VERIFY_ACTION = 'verify-dating'
const VERIFY_SIGNAL = '0x12312'
const PAYMENT_RECIPIENT = '0xf54204cd8e7d73d73b2a259c6d9b1450bbdafce0'
const PAYMENT_AMOUNT = 0.002

// Types
interface VerificationResult {
  isSuccess: boolean;
  error?: string;
}

// Haptic feedback functions
export const sendHapticFeedback = () => {
  console.log('Sending haptic feedback command');
  MiniKit.commands.sendHapticFeedback({
    hapticsType: 'impact',
    style: 'light',
  })
}

export const sendStrongHapticFeedback = () => {
  console.log('Sending strong haptic feedback command');
  MiniKit.commands.sendHapticFeedback({
    hapticsType: 'impact',
    style: 'heavy',
  })
}

export const sendSuccessNotification = () => {
  console.log('Sending success notification');
  MiniKit.commands.sendHapticFeedback({
    hapticsType: 'notification',
    style: 'success',
  })
}
export const sendPayment = async (): Promise<boolean> => {
    sendStrongHapticFeedback()
    const payload: PayCommandInput = {
      reference: "hi-testing",
      to: PAYMENT_RECIPIENT,
      tokens: [
        {
          symbol: Tokens.WLD,
          token_amount: tokenToDecimals(PAYMENT_AMOUNT, Tokens.WLD).toString(),
        },
        {
          symbol: Tokens.USDCE,
          token_amount: tokenToDecimals(PAYMENT_AMOUNT, Tokens.USDCE).toString(),
        },
      ],
      description: 'Test example payment for minikit',
    }
  
    const { finalPayload } = await MiniKit.commandsAsync.pay(payload)
    return finalPayload.status === 'success';
  }

// Payment function
export const payWithWorldcoin = async (paymentAmount: number, description: string): Promise<boolean> => {
    sendStrongHapticFeedback()
    const payload: PayCommandInput = {
        reference: "hi-testing",
        to: PAYMENT_RECIPIENT,
        tokens: [
        {
            symbol: Tokens.WLD,
            token_amount: tokenToDecimals(paymentAmount, Tokens.WLD).toString(),
        },
        {
            symbol: Tokens.USDCE,
            token_amount: tokenToDecimals(paymentAmount, Tokens.USDCE).toString(),
        },
        ],
        description: description,
    }

    const { finalPayload } = await MiniKit.commandsAsync.pay(payload)
    return finalPayload.status === 'success';
}

// Verification functions
export const verifyUser = async (): Promise<VerificationResult> => {
  if (!MiniKit.isInstalled()) {
    return { isSuccess: false, error: 'MiniKit not installed' };
  }

  const verifyPayload: VerifyCommandInput = {
    action: VERIFY_ACTION,
    signal: VERIFY_SIGNAL,
    verification_level: VerificationLevel.Orb,
  }

  try {
    const { finalPayload } = await MiniKit.commandsAsync.verify(verifyPayload)
    
    if (finalPayload.status === 'error') {
      return { isSuccess: false, error: 'Verification failed' };
    }

    const verifyResponse = await fetch('/api/verify', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        payload: finalPayload as ISuccessResult,
        action: VERIFY_ACTION,
        signal: VERIFY_SIGNAL,
      }),
    })

    const verifyResponseJson = await verifyResponse.json()
    return { isSuccess: verifyResponseJson.status === 200 };
  } catch (error) {
    return { isSuccess: false, error: error instanceof Error ? error.message : 'Unknown error' };
  }
}


export const signAndVerifyMessage = async (message: string) => {
  const signMessagePayload: SignMessageInput = {
    message: "I confirm that the information in my profile is truthful and accurately represents me.",
  };

  const {finalPayload} = await MiniKit.commandsAsync.signMessage(signMessagePayload);

//   if (finalPayload.status === "success") {
//     // const messageHash = hashSafeMessage(messageToSign);

//     const isValid = await (
//       await Safe.init({
//         provider:
//           "https://worldchain-mainnet.g.alchemy.com/v2/your-api-key",
//         safeAddress: finalPayload.address,
//       })
//     ).isValidSignature(message, finalPayload.signature);

    // Checks functionally if the signature is correct
    if (finalPayload.status === "success") {
      console.log("Signature is valid");
    }
};

// App ID helper
export const getAppId = (): string | null => {
  const envAppId = process.env.APP_ID;
  if (!envAppId) {
    console.warn('APP_ID not found in environment variables');
    return null;
  }
  return envAppId;
}
